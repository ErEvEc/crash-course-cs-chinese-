[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: Early Programming- Crash Course Computer Science #10.mp4
Video File: Early Programming- Crash Course Computer Science #10.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 45
Active Line: 66
Video Position: 4873

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: 720P-CN,Noto Sans S Chinese Bold,55,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,2,2,10,10,20,1
Style: OP-ED,Noto Sans S Chinese Bold,55,&H0000D8FF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: FOOT-NOTE,Noto Sans S Chinese Bold,45,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,2,4,10,10,20,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,OP-ED,,0,0,0,,{\pos(633.333,305.333)}{\c&H00D8FF&\fs55\pos(960,340)}阿尔法小分队荣誉译制\N{\c&H00D8FF&\fs45}{\c&H43DEAA&\fs45}翻：@Auriance校：@ErrorEnvyEnchant 压制：@Mihael_Ho \N{\c&H00D8FF&\fs45}{\c&H00D8FF&\fs55}长期招募 详情见微博置顶@阿尔法小分队科教组
Dialogue: 0,0:00:03.10,0:00:05.96,720P-CN,,0,0,0,,大家好 我是凯莉·安 欢迎来到计算机速成课\N{\c&H00D8FF&\fs40}Hi, I'm Carrie Anne and welcome to Crash Course Computer Science.
Dialogue: 0,0:00:05.96,0:00:10.28,720P-CN,,0,0,0,,之前几期我们探讨了计算机工作的原理\N{\c&H00D8FF&\fs40}Over the last few episodes, We've talked a lot about the mechanics of how computers work,
Dialogue: 0,0:00:10.28,0:00:13.58,720P-CN,,0,0,0,,复杂电路如何存取内存数据\N{\c&H00D8FF&\fs40}how they use complex circuits to save and retrieve values from memory,
Dialogue: 0,0:00:13.58,0:00:17.30,720P-CN,,0,0,0,,以及如何使用数据完成计算 比如两数相加\N{\c&H00D8FF&\fs40}and perform operations on those values, like adding two numbers together.
Dialogue: 0,0:00:17.30,0:00:21.41,720P-CN,,0,0,0,,我们还简要提到了计算机程序\N{\c&H00D8FF&\fs40}We've even briefly talked about sequences of operations, which is a computer program.
Dialogue: 0,0:00:21.41,0:00:24.94,720P-CN,,0,0,0,,但我们还没说明计算机如何加载程序\N{\c&H00D8FF&\fs40}What we haven't talked about is how a program gets into a computer.
Dialogue: 0,0:00:24.94,0:00:26.84,720P-CN,,0,0,0,,记得吗 第7和第8期讲过\N{\c&H00D8FF&\fs40}You might remember in episode 7 and 8 ,
Dialogue: 0,0:00:26.84,0:00:30.76,720P-CN,,0,0,0,,当我们在当时制造的CPU步进简单的示例程序\N{\c&H00D8FF&\fs40}when we stepped through some simple example programs for the CPU that we had created.
Dialogue: 0,0:00:30.76,0:00:33.30,720P-CN,,0,0,0,,为了简化\N{\c&H00D8FF&\fs40}For simplicity, we just waved our hands
Dialogue: 0,0:00:33.30,0:00:35.42,720P-CN,,0,0,0,,我们直接假设程序已经在内存里了\N{\c&H00D8FF&\fs40}and said that the program was already magically in memory.
Dialogue: 0,0:00:35.42,0:00:38.74,720P-CN,,0,0,0,,但实际上 程序必须要经过加载\N{\c&H00D8FF&\fs40}But in reality, programs have to be loaded into a computer's memory.
Dialogue: 0,0:00:38.74,0:00:40.74,720P-CN,,0,0,0,,这不是魔术 这是计算机科学\N{\c&H00D8FF&\fs40}It's not magic. It's computer science.
Dialogue: 0,0:00:49.96,0:00:53.52,720P-CN,,0,0,0,,对机器编程的需求远早于计算机的出现\N{\c&H00D8FF&\fs40}The need to programme machines existed way before the development of computers.
Dialogue: 0,0:00:53.52,0:00:56.82,720P-CN,,0,0,0,,纺织业是一个典型的例子\N{\c&H00D8FF&\fs40}The most famous example of this was in textile manufacturing.
Dialogue: 0,0:00:56.82,0:00:59.00,720P-CN,,0,0,0,,如果需要一张大的红桌布\N{\c&H00D8FF&\fs40}If you just wanted to weave a big red tablecloth,
Dialogue: 0,0:00:59.00,0:01:01.96,720P-CN,,0,0,0,,只需要让织布机带着红纺线编织就行了\N{\c&H00D8FF&\fs40}you could simply feed red thread into a loom and let it run.
Dialogue: 0,0:01:01.96,0:01:05.32,720P-CN,,0,0,0,,但如果想要布匹带有条纹或者格子的花纹呢\N{\c&H00D8FF&\fs40}But what about if you wanted the cloth to have a pattern like stripes or plaid?
Dialogue: 0,0:01:05.32,0:01:09.54,720P-CN,,0,0,0,,工人就必须不断按照花纹的样式调整织布机\N{\c&H00D8FF&\fs40}Workers would have to periodically reconfigure the loom as dictated by the pattern,
Dialogue: 0,0:01:09.54,0:01:12.86,720P-CN,,0,0,0,,但这样非常耗费人力 所以当时有花纹的织物很贵\N{\c&H00D8FF&\fs40}but this was labor intensive which made patterned fabrics expensive.
Dialogue: 0,0:01:12.86,0:01:16.92,720P-CN,,0,0,0,,约瑟夫·玛丽·雅卡尔发明的可编程织布机应运而生\N{\c&H00D8FF&\fs40}In response, Joseph Marie Jacquard developed a programmable textile loom,
Dialogue: 0,0:01:12.86,0:01:16.92,FOOT-NOTE,,0,0,0,,{\pos(58,100)}【注：约瑟夫·玛丽·雅卡尔（1752年6月7日－1834年8月7日），法国发明家。\N1. 因为发明雅卡尔织布机，在1805年受拿破仑皇帝嘉奖3000法郎终生养老金(按黄金\N比价，相当于2018年人民币23万5千元)\N2. 在随后的6年，每台出售的织布机，他可以抽得专利费50法郎(同上，约人民币4千元)】
Dialogue: 0,0:01:16.92,0:01:19.12,720P-CN,,0,0,0,,它于1801年面世\N{\c&H00D8FF&\fs40}which he first demonstrated in 1801.
Dialogue: 0,0:01:19.14,0:01:22.18,720P-CN,,0,0,0,,布匹每行的花纹由打孔卡确定\N{\c&H00D8FF&\fs40}The pattern for each row of the cloth was defined by a punched card.
Dialogue: 0,0:01:22.18,0:01:24.73,720P-CN,,0,0,0,,孔的有无\N{\c&H00D8FF&\fs40}The presence or absence of a hole in the card
Dialogue: 0,0:01:24.73,0:01:26.92,720P-CN,,0,0,0,,影响经纱在织布机中的高低\N{\c&H00D8FF&\fs40}determined if a specific thread was held high or low in the loom.
Dialogue: 0,0:01:24.73,0:01:26.92,FOOT-NOTE,,0,0,0,,{\pos(268,26)}【注：经纱与纬纱互相垂直，二者互相交织成为织物】
Dialogue: 0,0:01:26.92,0:01:30.92,720P-CN,,0,0,0,,这样 称为纬纱的横向纺线得以从经纱的上或下通过\N{\c&H00D8FF&\fs40}Such that the cross thread called the weft passed above or below the thread.
Dialogue: 0,0:01:30.92,0:01:34.24,720P-CN,,0,0,0,,为了让每行的花纹不同 打孔卡被连成了长串\N{\c&H00D8FF&\fs40}To vary the pattern across rows these punch cards were arranged in long chains,
Dialogue: 0,0:01:34.24,0:01:36.24,720P-CN,,0,0,0,,对织布机来说 这就是连续的指令\N{\c&H00D8FF&\fs40}forming a sequence of commands for the loom.
Dialogue: 0,0:01:36.24,0:01:37.46,720P-CN,,0,0,0,,有点耳熟吧\N{\c&H00D8FF&\fs40}Sound familiar?
Dialogue: 0,0:01:37.46,0:01:41.16,720P-CN,,0,0,0,,很多人认为雅卡尔的织布机是最早的编程形式之一\N{\c&H00D8FF&\fs40}Many consider Jacquard's loom to be one of the earliest forms of programming.
Dialogue: 0,0:01:41.16,0:01:45.64,720P-CN,,0,0,0,,打孔卡也成为了低成本 可靠并且相对可读的数据存储介质\N{\c&H00D8FF&\fs40}Punched cards, turned out to be a cheap , reliable, fairly human readable way to store data.
Dialogue: 0,0:01:45.64,0:01:49.86,720P-CN,,0,0,0,,雅卡尔织布机发明大约100年后 1890年人口普查也用到了打孔卡\N{\c&H00D8FF&\fs40}Nearly a century later, punch cards were use to help tabulate the 1890 newest census
Dialogue: 0,0:01:49.86,0:01:51.50,720P-CN,,0,0,0,,第1期讲过的\N{\c&H00D8FF&\fs40}which we talked about in episode 1.
Dialogue: 0,0:01:51.50,0:01:54.00,720P-CN,,0,0,0,,每张卡存储了一个人的信息\N{\c&H00D8FF&\fs40}Each card held an individual person's data.
Dialogue: 0,0:01:54.00,0:01:57.66,720P-CN,,0,0,0,,比如 种族 婚姻状况 孩子数量 出生地等等\N{\c&H00D8FF&\fs40}Things like race, marital status, number of children, country of birth, and so on.
Dialogue: 0,0:01:57.66,0:01:59.22,720P-CN,,0,0,0,,对于普查的每个问题\N{\c&H00D8FF&\fs40}For each demographic question,
Dialogue: 0,0:01:59.22,0:02:02.36,720P-CN,,0,0,0,,工作人员都会在对应答案的位置打孔\N{\c&H00D8FF&\fs40}a census worker would punch out a hole of the appropriate position.
Dialogue: 0,0:02:02.36,0:02:04.82,720P-CN,,0,0,0,,当把卡片插入编表机时\N{\c&H00D8FF&\fs40}When a card was fed into the tabulating machine,
Dialogue: 0,0:02:04.82,0:02:08.84,720P-CN,,0,0,0,,卡片上的孔会让其对应结果的总数加1\N{\c&H00D8FF&\fs40}a hole would cause the running total for that specific answer to be increased by one.
Dialogue: 0,0:02:08.84,0:02:12.02,720P-CN,,0,0,0,,这样可以输入整个国家民众的数据\N{\c&H00D8FF&\fs40}In this way you could feed the entire county's worth of people
Dialogue: 0,0:02:12.02,0:02:15.32,720P-CN,,0,0,0,,并最终得到所有普查问题的结果\N{\c&H00D8FF&\fs40}and at the end you'd have running totals for all of the questions that you asked.
Dialogue: 0,0:02:15.32,0:02:19.70,720P-CN,,0,0,0,,需要指出一点 早期的编表机并不是计算机\N{\c&H00D8FF&\fs40}It is important to note here that early tabulating machines were not truly computers
Dialogue: 0,0:02:19.70,0:02:21.92,720P-CN,,0,0,0,,因为它只能完成一样工作——汇总数据\N{\c&H00D8FF&\fs40}as they can only do one thing-tabulate.
Dialogue: 0,0:02:21.92,0:02:24.40,720P-CN,,0,0,0,,所有的操作都是固定不变的\N{\c&H00D8FF&\fs40}Their operation was fixed and not programmable.
Dialogue: 0,0:02:24.40,0:02:27.00,720P-CN,,0,0,0,,打孔卡仅仅记录数据而不是程序\N{\c&H00D8FF&\fs40}Punch cards stored data, but not a program.
Dialogue: 0,0:02:27.00,0:02:30.60,720P-CN,,0,0,0,,在其后的60年 这些机器的性能不断提升\N{\c&H00D8FF&\fs40}Over the next 60 years, these business machines grew in capability,
Dialogue: 0,0:02:30.60,0:02:33.34,720P-CN,,0,0,0,,实现了减法 乘法 除法\N{\c&H00D8FF&\fs40}adding features to subtract, multiply, divide,
Dialogue: 0,0:02:33.34,0:02:36.48,720P-CN,,0,0,0,,甚至能够完成何时执行某个特定操作的简单决策\N{\c&H00D8FF&\fs40}and even make simple decisions about when to perform certain operations.
Dialogue: 0,0:02:36.48,0:02:40.94,720P-CN,,0,0,0,,为了能触发能够完成计算的恰当功能\N{\c&H00D8FF&\fs40}To trigger these functions appropriately, so that different calculations could be performed,
Dialogue: 0,0:02:40.94,0:02:43.22,720P-CN,,0,0,0,,程序员发明了控制台\N{\c&H00D8FF&\fs40}a programmer accessed a control panel.
Dialogue: 0,0:02:43.22,0:02:45.14,720P-CN,,0,0,0,,面板上排满了小插孔\N{\c&H00D8FF&\fs40}This panel was full of little sockets,
Dialogue: 0,0:02:45.14,0:02:48.52,720P-CN,,0,0,0,,程序员可以将电缆插入孔中\N{\c&H00D8FF&\fs40}into which a programmer would plug cables to pass values and signals
Dialogue: 0,0:02:48.52,0:02:50.28,720P-CN,,0,0,0,,在机器的不同部件间传输数据和信号\N{\c&H00D8FF&\fs40}between different parts of the machine.
Dialogue: 0,0:02:50.28,0:02:52.86,720P-CN,,0,0,0,,因此它也被称为插线板\N{\c&H00D8FF&\fs40}For this reason they were also called plug boards.
Dialogue: 0,0:02:52.86,0:02:55.19,720P-CN,,0,0,0,,不过这也意味着\N{\c&H00D8FF&\fs40}Unfortunately, this meant having to rewire the machine
Dialogue: 0,0:02:55.19,0:02:57.80,720P-CN,,0,0,0,,只要程序改变就必须重新接线\N{\c&H00D8FF&\fs40}each time a different program needed to be run.
Dialogue: 0,0:02:57.80,0:03:01.34,720P-CN,,0,0,0,,因此到20年代 这些插线板都设计成了可替换的\N{\c&H00D8FF&\fs40}And so by the 1920s, these plug boards were made swappable.
Dialogue: 0,0:03:01.34,0:03:03.88,720P-CN,,0,0,0,,这不仅让编程更容易了\N{\c&H00D8FF&\fs40}This not only made programming a lot more comfortable,
Dialogue: 0,0:03:03.88,0:03:07.32,720P-CN,,0,0,0,,也让机器可以载入不同的程序\N{\c&H00D8FF&\fs40}but also allowed for different programs to be plugged into a machine.
Dialogue: 0,0:03:07.32,0:03:10.62,720P-CN,,0,0,0,,比如 一个板子用于计算营业税\N{\c&H00D8FF&\fs40}For example, one board might be wired to calculate sales tax,
Dialogue: 0,0:03:10.62,0:03:12.33,720P-CN,,0,0,0,,而另一个用来计算工资总额\N{\c&H00D8FF&\fs40}while another helps with payroll.
Dialogue: 0,0:03:12.33,0:03:15.06,720P-CN,,0,0,0,,但是用插线板编程实在太复杂了\N{\c&H00D8FF&\fs40}But plug boards were fiendishly complicated to program.
Dialogue: 0,0:03:15.06,0:03:18.82,720P-CN,,0,0,0,,上面这团乱七八糟的连线是用来计算损益汇总表的\N{\c&H00D8FF&\fs40}This tangle of wires is a program for calculating a profit loss summary,
Dialogue: 0,0:03:18.82,0:03:23.22,720P-CN,,0,0,0,,用的是IBM 402会计机 它在40年代曾风靡一时 \N{\c&H00D8FF&\fs40}using an IBM 402 accounting machine, which were popular in the 1940s.
Dialogue: 0,0:03:23.22,0:03:27.42,720P-CN,,0,0,0,,插线板这种编程方式对机电式计算机来说也不是孤例\N{\c&H00D8FF&\fs40}And this style of plug board programming wasn't unique to electromechanical computers.
Dialogue: 0,0:03:27.42,0:03:31.06,720P-CN,,0,0,0,,1946年完工的第一台通用电子计算机ENIAC\N{\c&H00D8FF&\fs40}The world's first General-Purpose electronic computer, the ENIAC, completed in 1946,
Dialogue: 0,0:03:31.06,0:03:33.92,720P-CN,,0,0,0,,也大量使用了插线板\N{\c&H00D8FF&\fs40}used a ton of them.
Dialogue: 0,0:03:33.92,0:03:37.00,720P-CN,,0,0,0,,即便在程序在纸上写完之后\N{\c&H00D8FF&\fs40}Even after a program had been completely figured out on paper,
Dialogue: 0,0:03:37.00,0:03:40.44,720P-CN,,0,0,0,,线缆连接ENIAC并让程序能够运行\N{\c&H00D8FF&\fs40}physically wiring up the ENIAC and getting the program to run
Dialogue: 0,0:03:40.44,0:03:42.42,720P-CN,,0,0,0,,也可能花费3周以上时间\N{\c&H00D8FF&\fs40}could take upwards of three weeks.
Dialogue: 0,0:03:42.42,0:03:44.84,720P-CN,,0,0,0,,考虑到这些早期计算机开销之巨\N{\c&H00D8FF&\fs40}Given the enormous cost of these early computers,
Dialogue: 0,0:03:44.84,0:03:48.14,720P-CN,,0,0,0,,仅仅切换程序就需要宕机数周令人难以接受\N{\c&H00D8FF&\fs40}weeks of downtime simply to switch programs was unacceptable
Dialogue: 0,0:03:48.14,0:03:51.78,720P-CN,,0,0,0,,因此急需更新 更快 更灵活的编程方式\N{\c&H00D8FF&\fs40}and the new, faster, more flexible way to programme machines was badly needed.
Dialogue: 0,0:03:51.78,0:03:54.72,720P-CN,,0,0,0,,还好 到40年代末50年代初\N{\c&H00D8FF&\fs40}Fortunately by the late 1940s and into the 50s,
Dialogue: 0,0:03:54.72,0:03:56.84,720P-CN,,0,0,0,,电子存储出现了\N{\c&H00D8FF&\fs40}electronic memory was becoming feasible.
Dialogue: 0,0:03:56.84,0:03:58.86,720P-CN,,0,0,0,,随着成本降低 存储容量也在提升\N{\c&H00D8FF&\fs40}As costs fell, memory size grew.
Dialogue: 0,0:03:58.86,0:04:01.74,720P-CN,,0,0,0,,不再需要通过一堆接线来保存程序了\N{\c&H00D8FF&\fs40}Instead of storing a program as a physical plug board of wires,
Dialogue: 0,0:04:01.74,0:04:05.38,720P-CN,,0,0,0,,可以直接把程序保存在计算机内存里\N{\c&H00D8FF&\fs40}it became possible to store a program entirely in a computer's memory,
Dialogue: 0,0:04:05.38,0:04:09.68,720P-CN,,0,0,0,,在内存里程序员可以轻松改变程序 同时CPU也能快速访问它\N{\c&H00D8FF&\fs40}where it could be easily changed by programmers and quickly accessed by the CPU.
Dialogue: 0,0:04:09.68,0:04:12.68,720P-CN,,0,0,0,,这些计算机称为存储程序计算机\N{\c&H00D8FF&\fs40}These computers were called stored-program computers.
Dialogue: 0,0:04:12.68,0:04:16.22,720P-CN,,0,0,0,,有了足够大的内存 不仅可以放入待运行的程序\N{\c&H00D8FF&\fs40}With enough computer memory, you could store not only the program you wanted to run,
Dialogue: 0,0:04:16.22,0:04:18.38,720P-CN,,0,0,0,,还可以把需要的数据也存进去\N{\c&H00D8FF&\fs40}but also any data your program would need,
Dialogue: 0,0:04:18.38,0:04:20.53,720P-CN,,0,0,0,,甚至包括运行中生成的新数据\N{\c&H00D8FF&\fs40}including new values it created along the way.
Dialogue: 0,0:04:20.53,0:04:23.57,720P-CN,,0,0,0,,把程序数据统一存储在一起\N{\c&H00D8FF&\fs40}Unifying the progrmming data into a single shared memory
Dialogue: 0,0:04:23.57,0:04:25.45,720P-CN,,0,0,0,,称为冯诺依曼结构\N{\c&H00D8FF&\fs40}is called the von Neumann architecture.
Dialogue: 0,0:04:25.45,0:04:28.99,720P-CN,,0,0,0,,它因约翰·冯·诺伊曼得名 他是著名数学家 物理学家\N{\c&H00D8FF&\fs40}Named after John von Neumann, a prominent mathematician and physicist,
Dialogue: 0,0:04:28.99,0:04:32.96,720P-CN,,0,0,0,,参与了曼哈顿计划和一些早期的电子计算机开发工作\N{\c&H00D8FF&\fs40}who worked on the Manhattan project and several early electronic computers.
Dialogue: 0,0:04:32.96,0:04:36.92,720P-CN,,0,0,0,,他曾说过 “比起炸弹我在考虑更重要的事情”\N{\c&H00D8FF&\fs40}and once said, "I'm thinking about something much more important than bombs,
Dialogue: 0,0:04:36.92,0:04:38.68,720P-CN,,0,0,0,,“我在想计算机”\N{\c&H00D8FF&\fs40} I'm thinking about computers".
Dialogue: 0,0:04:38.68,0:04:40.80,720P-CN,,0,0,0,,冯诺依曼计算机的标志是\N{\c&H00D8FF&\fs40}The hallmarks of a von Neumann computer
Dialogue: 0,0:04:40.80,0:04:43.72,720P-CN,,0,0,0,,一个处理单元包含ALU\N{\c&H00D8FF&\fs40}are a processing unit containing an arithmetic logic unit,
Dialogue: 0,0:04:43.72,0:04:48.02,720P-CN,,0,0,0,,数据寄存器 指令寄存器 和指令地址寄存器\N{\c&H00D8FF&\fs40}data registers, an instruction register, and an instruction address register.
Dialogue: 0,0:04:48.02,0:04:51.40,720P-CN,,0,0,0,,还有 内存同时保存数据和指令\N{\c&H00D8FF&\fs40}And finally, a memory to store both data and instructions.
Dialogue: 0,0:04:51.40,0:04:52.81,720P-CN,,0,0,0,,希望你还记得\N{\c&H00D8FF&\fs40}Hopefully, this sounds familiar,
Dialogue: 0,0:04:52.81,0:04:55.70,720P-CN,,0,0,0,,第7期中我们已经完成了一个冯诺依曼计算机、\N{\c&H00D8FF&\fs40}because we actually built a von Neumann computer in episode 7.
Dialogue: 0,0:04:55.70,0:05:00.11,720P-CN,,0,0,0,,第一台冯诺伊曼结构的存储程序计算机\N{\c&H00D8FF&\fs40}The very first von Neumann architecture stored program computer
Dialogue: 0,0:05:00.11,0:05:03.96,720P-CN,,0,0,0,,于1948年在曼彻斯特大学建成 小名叫“宝贝”\N{\c&H00D8FF&\fs40}was constructed in 1948 by the University of Manchester, nicknamed "Baby".
Dialogue: 0,0:05:00.11,0:05:03.96,FOOT-NOTE,,0,0,0,,{\pos(26,86)}【注：1. Baby是为了试验制造的，又称为Small-Scale Experimental Machine(SSEM, \N小规模试验机)，1948.6.21运行了它的第一个程序\N2.Baby建成于曼彻斯特维多利亚大学Victoria University of Manchester，是曼大前身】
Dialogue: 0,0:05:03.96,0:05:08.44,720P-CN,,0,0,0,,你现在用的电脑也使用了相同的结构\N{\c&H00D8FF&\fs40}And even the computer you are watching this video right now uses the same architecture.
Dialogue: 0,0:05:08.44,0:05:11.41,720P-CN,,0,0,0,,现在计算机内存很大\N{\c&H00D8FF&\fs40}Now electronic computer memory is great and all,
Dialogue: 0,0:05:11.41,0:05:14.24,720P-CN,,0,0,0,,但是要运行程序还是要先加载程序数据\N{\c&H00D8FF&\fs40}but you still have to load the programming data in to the computer before it can run.
Dialogue: 0,0:05:14.24,0:05:16.24,720P-CN,,0,0,0,,所以当时用了打孔卡\N{\c&H00D8FF&\fs40}And for this reason, punch cards were used.
Dialogue: 0,0:05:16.24,0:05:17.58,720P-CN,,0,0,0,,看看思想泡泡\N{\c&H00D8FF&\fs40}Let's get to the Thought Bubble.
Dialogue: 0,0:05:17.58,0:05:21.16,720P-CN,,0,0,0,,直到80年代 几乎所有的计算机都有打孔读卡器\N{\c&H00D8FF&\fs40}Well into the 1980s, almost all computers had a punch card reader,
Dialogue: 0,0:05:21.16,0:05:23.51,720P-CN,,0,0,0,,它可以每次插入一张卡片\N{\c&H00D8FF&\fs40}which could suck in a single punch card at a time
Dialogue: 0,0:05:23.51,0:05:26.14,720P-CN,,0,0,0,,并将其内容写入计算机内存\N{\c&H00D8FF&\fs40}and write the contents of the card into the computer's memory.
Dialogue: 0,0:05:26.14,0:05:29.01,720P-CN,,0,0,0,,如果有一堆打孔卡\N{\c&H00D8FF&\fs40}If you loaded in a stack of punch cards, the reader would load them all
Dialogue: 0,0:05:29.01,0:05:31.54,720P-CN,,0,0,0,,那么读卡器会依次载入卡片内存 \N{\c&H00D8FF&\fs40}into memory sequentially, as a big block.
Dialogue: 0,0:05:31.54,0:05:35.24,720P-CN,,0,0,0,,只要程序数据进入内存了 计算机会得到通知去执行\N{\c&H00D8FF&\fs40}Once the programming data were in memory, the computer would be told to execute it.
Dialogue: 0,0:05:35.24,0:05:39.00,720P-CN,,0,0,0,,当然 即便简单的程序也会有上百行指令\N{\c&H00D8FF&\fs40}Of course, even simple computer programs might have hundreds of instructions,
Dialogue: 0,0:05:39.00,0:05:41.98,720P-CN,,0,0,0,,这意味着程序是保存在一堆打孔卡里的\N{\c&H00D8FF&\fs40}which meant that programs were stored as stacks of punch cards.
Dialogue: 0,0:05:41.98,0:05:45.36,720P-CN,,0,0,0,,如果你不小心把卡片掉地上了\N{\c&H00D8FF&\fs40}So if you ever have the misfortune of accidentally dropping your program on the floor,
Dialogue: 0,0:05:45.36,0:05:49.36,720P-CN,,0,0,0,,可能要花数小时乃至数天才能把代码按顺序复原\N{\c&H00D8FF&\fs40}it could take you hours, days, or even weeks to put the code back in the right order.
Dialogue: 0,0:05:49.36,0:05:53.58,720P-CN,,0,0,0,,一个常用技巧是在卡堆的侧面画一条对角线\N{\c&H00D8FF&\fs40}A common trick was to draw a diagonal line on the side of the card stack called striping,
Dialogue: 0,0:05:53.58,0:05:56.96,720P-CN,,0,0,0,,这样整理时至少有迹可循\N{\c&H00D8FF&\fs40}so you'd have at least some clue how to get it back into the right order.
Dialogue: 0,0:05:56.96,0:06:00.00,720P-CN,,0,0,0,,打孔卡记录的最大程序\N{\c&H00D8FF&\fs40}The largest program ever punched into punch cards
Dialogue: 0,0:06:00.00,0:06:04.46,720P-CN,,0,0,0,,是美国空军的“贤者”防空系统 完成于1955年\N{\c&H00D8FF&\fs40}was the US Air Force's sage air defense system, completed in 1955.
Dialogue: 0,0:06:04.46,0:06:09.20,720P-CN,,0,0,0,,鼎盛时期 该系统雇佣了全球20%的程序员\N{\c&H00D8FF&\fs40}At its peak, the product is said to have employed 20% of the world's programmers.
Dialogue: 0,0:06:09.20,0:06:14.20,720P-CN,,0,0,0,,它的主控程序存储于62,500张打孔卡中\N{\c&H00D8FF&\fs40}Its main control program was stored on a whopping 62,500 punch cards,
Dialogue: 0,0:06:14.20,0:06:16.98,720P-CN,,0,0,0,,大约是5MB的数据量\N{\c&H00D8FF&\fs40}which is equivalent to roughly 5 megabytes of data.
Dialogue: 0,0:06:16.98,0:06:19.50,720P-CN,,0,0,0,,今天看来稀松平常\N{\c&H00D8FF&\fs40}Pretty underwhelming by today's standards.
Dialogue: 0,0:06:19.50,0:06:22.74,720P-CN,,0,0,0,,打孔卡不仅可以让计算机载入数据\N{\c&H00D8FF&\fs40}And punch cards weren't only useful for getting data into computers,
Dialogue: 0,0:06:22.74,0:06:24.60,720P-CN,,0,0,0,,还可以读取计算机的数据\N{\c&H00D8FF&\fs40}but also getting data out of them.
Dialogue: 0,0:06:24.60,0:06:27.98,720P-CN,,0,0,0,,在程序执行完毕时 可以将结果从内存里写出\N{\c&H00D8FF&\fs40}At the end of a program, results could be written out of computer memory
Dialogue: 0,0:06:27.98,0:06:30.88,720P-CN,,0,0,0,,通过打孔记录到打孔卡上\N{\c&H00D8FF&\fs40}and onto punch cards by, well, punching cards.
Dialogue: 0,0:06:30.88,0:06:33.33,720P-CN,,0,0,0,,数据随后可以人工分析\N{\c&H00D8FF&\fs40}Then this data could be analyzed by humans
Dialogue: 0,0:06:33.33,0:06:36.88,720P-CN,,0,0,0,,或输入到另一台计算机中再次计算\N{\c&H00D8FF&\fs40}or loaded into a second program for additional computation.
Dialogue: 0,0:06:36.88,0:06:38.02,720P-CN,,0,0,0,,谢谢泡泡\N{\c&H00D8FF&\fs40}Thanks, Thought Bubble.
Dialogue: 0,0:06:38.02,0:06:40.70,720P-CN,,0,0,0,,与打孔卡类似的是打孔纸带\N{\c&H00D8FF&\fs40}A close cousin to punch cards was punched paper tape,
Dialogue: 0,0:06:40.70,0:06:44.86,720P-CN,,0,0,0,,它和打孔卡一样 只不过是连续的纸带而不是单张卡片\N{\c&H00D8FF&\fs40}which is basically the same idea, but continuously instead of being on individual cards.
Dialogue: 0,0:06:44.86,0:06:48.22,720P-CN,,0,0,0,,当然 我们还没谈到硬盘 光驱\N{\c&H00D8FF&\fs40}And of course, we haven't talked about hard drives, CD-Roms,
Dialogue: 0,0:06:48.22,0:06:50.96,720P-CN,,0,0,0,,DVD U盘以及其他东西\N{\c&H00D8FF&\fs40}DVDs, USB thumb drives, and other similar goodies.
Dialogue: 0,0:06:50.96,0:06:54.56,720P-CN,,0,0,0,,以后再讲这些高级的存储设备\N{\c&H00D8FF&\fs40}We'll get to those more advanced types of data storage in a future episode.
Dialogue: 0,0:06:54.56,0:06:57.02,720P-CN,,0,0,0,,最后 在插线板和打孔纸之后\N{\c&H00D8FF&\fs40}Finally, in addition to plug boards and punch paper,
Dialogue: 0,0:06:57.02,0:06:59.44,720P-CN,,0,0,0,,80年代前出现了另一种普遍的编程和控制计算机的方式\N{\c&H00D8FF&\fs40}there was another common way to program and control computers
Dialogue: 0,0:06:59.44,0:07:01.48,720P-CN,,0,0,0,,面板编程\N{\c&H00D8FF&\fs40}pre-1980: panel programming.
Dialogue: 0,0:07:01.48,0:07:05.20,720P-CN,,0,0,0,,它不是通过电缆的物理连接激活相应的功能\N{\c&H00D8FF&\fs40}Rather than having to physically plug in cables to activate certain functions,
Dialogue: 0,0:07:05.20,0:07:08.30,720P-CN,,0,0,0,,而是在巨大的面板上通过开关和按钮来实现控制\N{\c&H00D8FF&\fs40}this could also be done with huge panels full of switches and buttons.
Dialogue: 0,0:07:08.30,0:07:10.99,720P-CN,,0,0,0,,也有指示灯\N{\c&H00D8FF&\fs40}And there were indicator lights to display
Dialogue: 0,0:07:10.99,0:07:12.82,720P-CN,,0,0,0,,显示各功能状态和内存中的数值\N{\c&H00D8FF&\fs40}the status of various functions and values in memory.
Dialogue: 0,0:07:12.82,0:07:17.46,720P-CN,,0,0,0,,50 60年代的计算机通常都有与此相似的巨大控制台\N{\c&H00D8FF&\fs40}Computers of the 50s and 60s often featured huge control consoles that look like this.
Dialogue: 0,0:07:17.46,0:07:21.44,720P-CN,,0,0,0,,尽管仅使用开关录入整个程序很少见 但这确实可行的\N{\c&H00D8FF&\fs40}Although it was rare to input a whole program using just switches, it was possible.
Dialogue: 0,0:07:21.44,0:07:25.58,720P-CN,,0,0,0,,为爱好者设计的早期家用电脑大量使用了开关\N{\c&H00D8FF&\fs40}And early home computers made for the hobbyist market used switches extensively,
Dialogue: 0,0:07:25.58,0:07:29.54,720P-CN,,0,0,0,,因为他们买不起像打孔卡读卡器这样昂贵的外设\N{\c&H00D8FF&\fs40}because most home users couldn't afford expensive peripherals like punch card readers.
Dialogue: 0,0:07:29.54,0:07:33.34,720P-CN,,0,0,0,,第一个在商业上取得成功的家用机是Altair 8800\N{\c&H00D8FF&\fs40}The first commercially successful home computer was the Altair 8800,
Dialogue: 0,0:07:29.54,0:07:33.34,FOOT-NOTE,,0,0,0,,{\pos(40,54)}【注：Altair 8800是1974年基于Intel 8080所设计的一部微型电脑，当时还在哈佛大学\N读书的比尔·盖茨与伙伴保罗·艾伦一起为Altair 8800电脑设计Altair BASIC解译器】
Dialogue: 0,0:07:33.34,0:07:36.74,720P-CN,,0,0,0,,有2种版本：整机和需要组装的散件\N{\c&H00D8FF&\fs40}which sold in two versions: preassembled and as a kit.
Dialogue: 0,0:07:36.74,0:07:39.58,720P-CN,,0,0,0,,组装散件版受到了业余爱好者的欢迎\N{\c&H00D8FF&\fs40}The kit, which was popular with amateur computing enthusiasts,
Dialogue: 0,0:07:39.58,0:07:44.61,720P-CN,,0,0,0,,它在1975年以售价史无前例的低价发售 约400美元\N{\c&H00D8FF&\fs40}sold for the then unprecedented low price of around $400 in 1975
Dialogue: 0,0:07:44.61,0:07:47.20,720P-CN,,0,0,0,,相当于2017年的2000美元\N{\c&H00D8FF&\fs40} or about $2,000 in 2017.
Dialogue: 0,0:07:47.20,0:07:50.99,720P-CN,,0,0,0,,8800的编程就是拨弄前面板上的开关\N{\c&H00D8FF&\fs40}To program 8800 you'd literally toggle the switches on the front panel
Dialogue: 0,0:07:50.99,0:07:53.82,720P-CN,,0,0,0,,用来输入指令对应的二进制操作码\N{\c&H00D8FF&\fs40}to enter the binary opcodes for the instruction you wanted.
Dialogue: 0,0:07:53.82,0:07:57.52,720P-CN,,0,0,0,,然后按下保存按钮把数据写入内存\N{\c&H00D8FF&\fs40}Then you press the deposit button to write that value into memory.
Dialogue: 0,0:07:57.52,0:07:59.62,720P-CN,,0,0,0,,随后在内存的下一个位置\N{\c&H00D8FF&\fs40}Then in the next location in memory,
Dialogue: 0,0:07:59.62,0:08:03.90,720P-CN,,0,0,0,,再拨弄开关进入下一个指令 再按保存 以此类推\N{\c&H00D8FF&\fs40}you toggle the switches again for your next instruction, deposit it and so on.
Dialogue: 0,0:08:03.90,0:08:06.40,720P-CN,,0,0,0,,当把程序全部输入内存后\N{\c&H00D8FF&\fs40}When you had finally entered your whole program into memory,
Dialogue: 0,0:08:06.40,0:08:09.34,720P-CN,,0,0,0,,拨弄开关 把内存地址复零位\N{\c&H00D8FF&\fs40}you would toggle the switches, move back to memory address zero,
Dialogue: 0,0:08:09.34,0:08:12.10,720P-CN,,0,0,0,,按下运行按钮 观察指示灯闪烁\N{\c&H00D8FF&\fs40}press the run button, and watch the little lights blink.
Dialogue: 0,0:08:12.10,0:08:14.80,720P-CN,,0,0,0,,这就是1975年的家用计算机\N{\c&H00D8FF&\fs40}That was home computing in 1975, wow.
Dialogue: 0,0:08:14.80,0:08:17.93,720P-CN,,0,0,0,,不管是插线板开关还是打孔带\N{\c&H00D8FF&\fs40}Whether it was plug board switches or punched paper
Dialogue: 0,0:08:17.93,0:08:20.70,720P-CN,,0,0,0,,为早期计算机编程都是专家的差事\N{\c&H00D8FF&\fs40}programming these early computers was the realm of experts.
Dialogue: 0,0:08:20.70,0:08:24.54,720P-CN,,0,0,0,,要么是专业程序员 要么是技术狂人\N{\c&H00D8FF&\fs40}Either professionals who did this for a living, or technology enthusiasts.
Dialogue: 0,0:08:24.54,0:08:27.24,720P-CN,,0,0,0,,你需要精通底层硬件\N{\c&H00D8FF&\fs40}You needed intimate knowledge of the underlying hardware,
Dialogue: 0,0:08:27.24,0:08:30.82,720P-CN,,0,0,0,,比如处理器的操作码以及寄存器位宽才能写出程序\N{\c&H00D8FF&\fs40}so as things like processor opcodes and register width to write programs.
Dialogue: 0,0:08:30.82,0:08:33.24,720P-CN,,0,0,0,,这样的编程既困难又无趣\N{\c&H00D8FF&\fs40}This meant programming was hard and tedious.
Dialogue: 0,0:08:33.24,0:08:35.91,720P-CN,,0,0,0,,甚至连专业工程师和科学家使用时\N{\c&H00D8FF&\fs40}And even professional engineers and scientists struggle
Dialogue: 0,0:08:35.91,0:08:38.20,720P-CN,,0,0,0,,也是捉襟见肘\N{\c&H00D8FF&\fs40}to take full advantage of what computing could offer.
Dialogue: 0,0:08:38.20,0:08:41.62,720P-CN,,0,0,0,,需要更简单的方式指示电脑工作\N{\c&H00D8FF&\fs40}What was needed was a simpler way to tell computers what to do;
Dialogue: 0,0:08:41.62,0:08:44.02,720P-CN,,0,0,0,,一个更容易写程序的方法\N{\c&H00D8FF&\fs40}a simpler way to write programs.
Dialogue: 0,0:08:44.02,0:08:47.96,720P-CN,,0,0,0,,这正是下期要讲的编程语言\N{\c&H00D8FF&\fs40}And that brings us to programming languages which we'll talk about next episode.
Dialogue: 0,0:08:47.96,0:08:49.32,720P-CN,,0,0,0,,下周见\N{\c&H00D8FF&\fs40}See you next week.
Dialogue: 0,0:08:49.32,0:08:54.00,OP-ED,,0,0,0,,{\pos(633.333,305.333)}{\c&H00D8FF&\fs55\pos(960,340)}阿尔法小分队荣誉译制\N{\c&H00D8FF&\fs45}{\c&H43DEAA&\fs45}翻：@Auriance  校：@ErrorEnvyEnchant 压制：@Mihael_Ho \N{\c&H00D8FF&\fs45}{\c&H00D8FF&\fs55}长期招募 详情见微博置顶@阿尔法小分队科教组

[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: The Central Processing Unit (CPU)- Crash Course Computer Science #7.mp4
Video File: The Central Processing Unit (CPU)- Crash Course Computer Science #7.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 332
Active Line: 350
Video Position: 15750

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Noto Sans S Chinese Bold,55,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,20,1
Style: 720P-CN,Noto Sans S Chinese Bold,55,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,2,2,10,10,20,1
Style: OP-ED,Noto Sans S Chinese Bold,55,&H0000D8FF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: FOOT-NOTE,Noto Sans S Chinese Bold,45,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,2,4,10,10,20,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:02.69,0:00:04.69,720P-CN,,0,0,0,,{\pos(633.333,305.333)}{\c&H00D8FF&\fs55\pos(960,340)}阿尔法小分队荣誉译制\N{\c&H00D8FF&\fs45}{\c&H43DEAA&\fs45}翻：@ErrorEnvyEnchant 校：@Auriance 压制：@Mihael_Ho \N{\c&H00D8FF&\fs45}{\c&H00D8FF&\fs55}长期招募 详情见微博置顶@阿尔法小分队科教组
Dialogue: 0,0:00:02.70,0:00:05.70,720P-CN,,0,0,0,,大家好 我是凯莉·安 这是计算机速成课\N{\c&H00D8FF&\fs40}Hi, I'm Carrie Anne, this is Crash Course Computer Science,
Dialogue: 0,0:00:05.70,0:00:07.60,720P-CN,,0,0,0,,今天我们讨论处理器\N{\c&H00D8FF&\fs40}and today, we're talking about processors.
Comment: 0,0:00:05.70,0:00:07.60,720P-CN,,0,0,0,,今天的主题是处理器\N{\c&H00D8FF&\fs40}and today, we're talking about processors.
Dialogue: 0,0:00:07.60,0:00:11.45,720P-CN,,0,0,0,,只是提醒一下 这可能是这一系列中最难的一集\N{\c&H00D8FF&\fs40}Just a warning though - this is probably the most complicated episode in the series.
Comment: 0,0:00:07.60,0:00:11.45,720P-CN,,0,0,0,,提醒下 这期内容可能是课程中最难的\N{\c&H00D8FF&\fs40}Just a warning though - this is probably the most complicated episode in the series.
Dialogue: 0,0:00:11.50,0:00:12.95,720P-CN,,0,0,0,,所以当你看到这就很了不起了\N{\c&H00D8FF&\fs40}So once you get this, you're golden.
Comment: 0,0:00:11.50,0:00:12.95,720P-CN,,0,0,0,,能跟得上就很不错了\N{\c&H00D8FF&\fs40}So once you get this, you're golden.
Dialogue: 0,0:00:13.00,0:00:16.45,720P-CN,,0,0,0,,我们已经制造出了算数和逻辑单元 它以二进制数为输入 \N{\c&H00D8FF&\fs40}We've already made an Arithmetic and Logic Unit, which takes in binary numbers
Comment: 0,0:00:13.00,0:00:15.32,720P-CN,,0,0,0,,之前我们完成了ALU\N{\c&H00D8FF&\fs40}We've already made an Arithmetic and Logic Unit,
Comment: 0,0:00:15.32,0:00:17.95,720P-CN,,0,0,0,,它接收二进制数并完成计算 \N{\c&H00D8FF&\fs40}which takes in binary numbers and performs calculations,
Dialogue: 0,0:00:16.45,0:00:20.05,720P-CN,,0,0,0,,进行计算 我们还制造了两种计算机存储器\N{\c&H00D8FF&\fs40}and performs calculations, and we've made two types of computer memory:
Comment: 0,0:00:17.95,0:00:20.05,720P-CN,,0,0,0,,我们还实现了二种计算机存储\N{\c&H00D8FF&\fs40}and we've made two types of computer memory:
Dialogue: 0,0:00:20.05,0:00:24.15,720P-CN,,0,0,0,,寄存器 线性的小存储器只能用来储存单个数值\N{\c&H00D8FF&\fs40}Registers -- small, linear chunks of memory, useful for storing a single value
Comment: 0,0:00:20.05,0:00:24.15,720P-CN,,0,0,0,,一种是寄存器 它用于保存单个数值 是连续的小块存储 \N{\c&H00D8FF&\fs40}Registers -- small, linear chunks of memory, useful for storing a single value
Dialogue: 0,0:00:24.15,0:00:26.15,720P-CN,,0,0,0,,然后我们把它叠加制成了随机访问存储器RAM\N{\c&H00D8FF&\fs40}and then we scaled up, and made some RAM,
Comment: 0,0:00:24.15,0:00:26.15,720P-CN,,0,0,0,,之后我们扩大了存储的容量 实现了另一种存储器RAM\N{\c&H00D8FF&\fs40}and then we scaled up, and made some RAM,
Dialogue: 0,0:00:26.15,0:00:30.35,720P-CN,,0,0,0,,这是一种更大的可以存放许多不同地址的数字的记忆储存\N{\c&H00D8FF&\fs40}a larger bank of memory that can store a lot of numbers located at different addresses.
Comment: 0,0:00:26.15,0:00:30.35,720P-CN,,0,0,0,,RAM是一种更大的存储单元 可以在不同地址保存大量数据\N{\c&H00D8FF&\fs40}a larger bank of memory that can store a lot of numbers located at different addresses.
Dialogue: 0,0:00:30.35,0:00:33.95,720P-CN,,0,0,0,,现在该把它们结合到一起搭建所有计算机的心脏\N{\c&H00D8FF&\fs40}Now it's time to put it all together and build ourselves the heart of any computer,
Comment: 0,0:00:30.35,0:00:33.95,720P-CN,,0,0,0,,是时候把他们组合起来 构建计算机的“核心（芯）”了\N{\c&H00D8FF&\fs40}Now it's time to put it all together and build ourselves the heart of any computer,
Dialogue: 0,0:00:33.95,0:00:37.20,720P-CN,,0,0,0,,但是没有人类内心的感情\N{\c&H00D8FF&\fs40}but without any of the emotional baggage that comes with human hearts.
Comment: 0,0:00:33.95,0:00:37.20,720P-CN,,0,0,0,,不过这颗“心（芯）”和人不一样 它没有情绪变化\N{\c&H00D8FF&\fs40}but without any of the emotional baggage that comes with human hearts.
Dialogue: 0,0:00:37.20,0:00:42.05,720P-CN,,0,0,0,,对计算机来说 这是中央处理器 通常叫做CPU\N{\c&H00D8FF&\fs40}For computers, this is the Central Processing Unit, most commonly called the CPU.
Comment: 0,0:00:37.20,0:00:42.05,720P-CN,,0,0,0,,这就是计算机的中央处理器 通常叫CPU\N{\c&H00D8FF&\fs40}For computers, this is the Central Processing Unit, most commonly called the CPU.
Dialogue: 0,0:00:51.20,0:00:53.40,720P-CN,,0,0,0,,CPU的工作是执行程序\N{\c&H00D8FF&\fs40}A CPU's job is to execute programs.
Comment: 0,0:00:51.20,0:00:53.40,720P-CN,,0,0,0,,CPU的任务是运行程序\N{\c&H00D8FF&\fs40}A CPU's job is to execute programs.
Dialogue: 0,0:00:53.40,0:00:57.45,720P-CN,,0,0,0,,像是微软办公 safari浏览器 或你最爱的{\i1}半条命2{\i0}游戏这样的程序\N{\c&H00D8FF&\fs40}Programs, like Microsoft Office, Safari, or your beloved copy of Half Life: 2,
Comment: 0,0:00:53.40,0:00:57.45,720P-CN,,0,0,0,,像微软的Office Safari浏览器 或着{\i1}半条命2{\i0}游戏这些程序\N{\c&H00D8FF&\fs40}Programs, like Microsoft Office, Safari, or your beloved copy of Half Life: 2,
Dialogue: 0,0:00:57.45,0:01:01.50,720P-CN,,0,0,0,,都是由一系列单独的操作组成 叫做指令\N{\c&H00D8FF&\fs40}are made up of a series of individual operations, called instructions,
Comment: 0,0:00:57.45,0:01:01.50,720P-CN,,0,0,0,,都是由一系列独立运算组成的 称为指令\N{\c&H00D8FF&\fs40}are made up of a series of individual operations, called instructions,
Dialogue: 0,0:01:01.50,0:01:03.50,720P-CN,,0,0,0,,因为他们指挥计算机去做什么\N{\c&H00D8FF&\fs40}because they “instruct” the computer what to do.
Dialogue: 0,0:01:03.50,0:01:06.60,720P-CN,,0,0,0,,如果是数学指令 如加法和减法 \N{\c&H00D8FF&\fs40}If these are mathematical instructions, like add or subtract,
Comment: 0,0:01:03.50,0:01:06.60,720P-CN,,0,0,0,,如果是加减法这类的数学指令\N{\c&H00D8FF&\fs40}If these are mathematical instructions, like add or subtract,
Dialogue: 0,0:01:06.60,0:01:09.65,720P-CN,,0,0,0,,CPU会设置它的ALU进行数学运算\N{\c&H00D8FF&\fs40}the CPU will configure its ALU to do the mathematical operation.
Dialogue: 0,0:01:09.65,0:01:11.65,720P-CN,,0,0,0,,或者是存储指令\N{\c&H00D8FF&\fs40}Or it might be a memory instruction,
Comment: 0,0:01:09.65,0:01:11.65,720P-CN,,0,0,0,,如果是内存指令\N{\c&H00D8FF&\fs40}Or it might be a memory instruction,
Dialogue: 0,0:01:11.65,0:01:15.40,720P-CN,,0,0,0,,这时CPU会用到存储器去读写数据\N{\c&H00D8FF&\fs40}in which case the CPU will talk with memory to read and write values.
Comment: 0,0:01:11.65,0:01:15.40,720P-CN,,0,0,0,,那么CPU会让内存读写数据\N{\c&H00D8FF&\fs40}in which case the CPU will talk with memory to read and write values.
Dialogue: 0,0:01:15.40,0:01:19.00,720P-CN,,0,0,0,,CPU有很多组分 所以我们会一步一步的设计\N{\c&H00D8FF&\fs40}There are a lot of parts in a CPU, so we're going to lay it out piece by piece,
Comment: 0,0:01:15.40,0:01:19.00,720P-CN,,0,0,0,,CPU分为多个部分 接下来会逐个讲解\N{\c&H00D8FF&\fs40}There are a lot of parts in a CPU, so we're going to lay it out piece by piece,
Dialogue: 0,0:01:19.00,0:01:20.30,720P-CN,,0,0,0,,同时进行搭建\N{\c&H00D8FF&\fs40} building up as we go.
Comment: 0,0:01:19.00,0:01:20.30,720P-CN,,0,0,0,,并把它们组合在一起\N{\c&H00D8FF&\fs40} building up as we go.
Dialogue: 0,0:01:20.30,0:01:23.80,720P-CN,,0,0,0,,我们会关注于功能块而不是展示每一条线路\N{\c&H00D8FF&\fs40}We'll focus on functional blocks, rather than showing every single wire.
Comment: 0,0:01:20.30,0:01:23.80,720P-CN,,0,0,0,,过程中会重点关注功能模块 忽略布线的细节 \N{\c&H00D8FF&\fs40}We'll focus on functional blocks, rather than showing every single wire.
Dialogue: 0,0:01:23.80,0:01:25.80,720P-CN,,0,0,0,,当把两个部件用线连接起来时\N{\c&H00D8FF&\fs40}When we do connect two components with a line,
Comment: 0,0:01:23.80,0:01:25.80,720P-CN,,0,0,0,,当二个模块有连接关系时\N{\c&H00D8FF&\fs40}When we do connect two components with a line,
Dialogue: 0,0:01:25.80,0:01:27.80,720P-CN,,0,0,0,,这就是进一步的抽象\N{\c&H00D8FF&\fs40}this is just another level of abstraction.
Comment: 0,0:01:25.80,0:01:27.80,720P-CN,,0,0,0,,我们也会用一根线来进行抽像表示 （从而隐藏细节）\N{\c&H00D8FF&\fs40}this is just another level of abstraction.
Dialogue: 0,0:01:27.80,0:01:30.80,720P-CN,,0,0,0,,这一层高级的视角叫做微结构\N{\c&H00D8FF&\fs40}This high level view is called the microarchitecture.
Comment: 0,0:01:27.80,0:01:30.80,720P-CN,,0,0,0,,这种高层的思考方式称为微体系结构（微架构）\N{\c&H00D8FF&\fs40}This high level view is called the microarchitecture.
Dialogue: 0,0:01:30.80,0:01:32.80,720P-CN,,0,0,0,,首先我们需要一些存储器\N{\c&H00D8FF&\fs40}OK, first, we're going to need some memory.
Comment: 0,0:01:30.80,0:01:32.80,720P-CN,,0,0,0,,第一步 我们需要一些内存\N{\c&H00D8FF&\fs40}OK, first, we're going to need some memory.
Dialogue: 0,0:01:32.80,0:01:35.85,720P-CN,,0,0,0,,我们进入上一集中的RAM模块\N{\c&H00D8FF&\fs40}Let's drop in the RAM module we created last episode.
Comment: 0,0:01:32.80,0:01:35.85,720P-CN,,0,0,0,,再看看上期完成的RAM模块\N{\c&H00D8FF&\fs40}Let's drop in the RAM module we created last episode.
Dialogue: 0,0:01:35.85,0:01:40.45,720P-CN,,0,0,0,,为了简化 我们假设它只有16个储存位置 每一个容纳8比特位\N{\c&H00D8FF&\fs40}To keep things simple, we'll assume it only has 16 memory locations, each containing 8 bits.
Comment: 0,0:01:35.85,0:01:40.45,720P-CN,,0,0,0,,为了简化 我们假设它只有16个内存地址 每一个地址有8位\N{\c&H00D8FF&\fs40}To keep things simple, we'll assume it only has 16 memory locations, each containing 8 bits.
Dialogue: 0,0:01:40.45,0:01:45.30,720P-CN,,0,0,0,,并且给处理器加上4个8位的存储寄存器 标号为A B C D\N{\c&H00D8FF&\fs40}Let's also give our processor four, 8-bit memory registers, labeled A, B, C and D
Comment: 0,0:01:40.45,0:01:45.30,720P-CN,,0,0,0,,再给处理器分配四个8位寄存器 分别称为A B C D\N{\c&H00D8FF&\fs40}Let's also give our processor four, 8-bit memory registers, labeled A, B, C and D
Dialogue: 0,0:01:45.30,0:01:48.15,720P-CN,,0,0,0,,用来临时储存和操作数值\N{\c&H00D8FF&\fs40}which will be used to temporarily store and manipulate values.
Comment: 0,0:01:45.30,0:01:48.15,720P-CN,,0,0,0,,用来暂存和操作数据\N{\c&H00D8FF&\fs40}which will be used to temporarily store and manipulate values.
Dialogue: 0,0:01:48.15,0:01:50.95,720P-CN,,0,0,0,,我们已经知道数据可以以二进制存在存储器中\N{\c&H00D8FF&\fs40}We already know that data can be stored in memory as binary values
Comment: 0,0:01:48.15,0:01:50.95,720P-CN,,0,0,0,,内存可以保存二进制形式的数据\N{\c&H00D8FF&\fs40}We already know that data can be stored in memory as binary values
Dialogue: 0,0:01:50.95,0:01:52.95,720P-CN,,0,0,0,,程序也可以存在存储器中\N{\c&H00D8FF&\fs40}and programs can be stored in memory too.
Comment: 0,0:01:50.95,0:01:52.95,720P-CN,,0,0,0,,也可以保存程序\N{\c&H00D8FF&\fs40}and programs can be stored in memory too.
Dialogue: 0,0:01:52.95,0:01:56.25,720P-CN,,0,0,0,,我们可以为每个CPU支持的指令分配一个身份编号ID\N{\c&H00D8FF&\fs40}We can assign an ID to each instruction supported by our CPU.
Comment: 0,0:01:52.95,0:01:56.25,720P-CN,,0,0,0,,可以给CPU支持的每个指令分配一个ID\N{\c&H00D8FF&\fs40}We can assign an ID to each instruction supported by our CPU.
Dialogue: 0,0:01:56.25,0:02:00.60,720P-CN,,0,0,0,,假设下 我们用前四位储存操作码\N{\c&H00D8FF&\fs40}In our hypothetical example, we use the first four bits to store the “operation code”,
Comment: 0,0:01:56.25,0:02:00.60,720P-CN,,0,0,0,,在上面的例子中 我们用前四位储存操作码\N{\c&H00D8FF&\fs40}In our hypothetical example, we use the first four bits to store the “operation code”,
Dialogue: 0,0:02:00.60,0:02:02.60,720P-CN,,0,0,0,,简写为opcode\N{\c&H00D8FF&\fs40}or opcode for short.
Dialogue: 0,0:02:02.60,0:02:06.05,720P-CN,,0,0,0,,后四位表明待运算的数来自哪里\N{\c&H00D8FF&\fs40}The final four bits specify where the data for that operation should come from -
Comment: 0,0:02:02.60,0:02:06.05,720P-CN,,0,0,0,,后四位代表数据的来源\N{\c&H00D8FF&\fs40}The final four bits specify where the data for that operation should come from -
Dialogue: 0,0:02:06.05,0:02:08.50,720P-CN,,0,0,0,,可能是寄存器或者是存储器的地址\N{\c&H00D8FF&\fs40}this could be registers or an address in memory.
Comment: 0,0:02:06.05,0:02:08.50,720P-CN,,0,0,0,,可能来自寄存器或内存地址\N{\c&H00D8FF&\fs40}this could be registers or an address in memory.
Dialogue: 0,0:02:08.50,0:02:11.30,720P-CN,,0,0,0,,我们需要额外两个寄存器来完善CPU\N{\c&H00D8FF&\fs40}We also need two more registers to complete our CPU.
Comment: 0,0:02:08.50,0:02:11.30,720P-CN,,0,0,0,,要完成CPU 还需要2个寄存器\N{\c&H00D8FF&\fs40}We also need two more registers to complete our CPU.
Dialogue: 0,0:02:11.30,0:02:14.80,720P-CN,,0,0,0,,首先需要一个寄存器记录执行到程序的哪一步\N{\c&H00D8FF&\fs40}First, we need a register to keep track of where we are in a program.
Comment: 0,0:02:11.30,0:02:14.80,720P-CN,,0,0,0,,首先需要一个寄存器追踪程序的执行情况\N{\c&H00D8FF&\fs40}First, we need a register to keep track of where we are in a program.
Dialogue: 0,0:02:14.80,0:02:18.80,720P-CN,,0,0,0,,为此我们使用指令地址寄存器 正如名字表明的\N{\c&H00D8FF&\fs40}For this, we use an instruction address register, which as the name suggests,
Comment: 0,0:02:14.80,0:02:18.80,720P-CN,,0,0,0,,因此需要指令地址寄存器 \N{\c&H00D8FF&\fs40}For this, we use an instruction address register, which as the name suggests,
Dialogue: 0,0:02:18.80,0:02:20.80,720P-CN,,0,0,0,,它当前指令的存储地址\N{\c&H00D8FF&\fs40} stores the memory address of the current instruction.
Comment: 0,0:02:18.80,0:02:20.80,720P-CN,,0,0,0,,顾名思义 它保存当前指令的内存地址\N{\c&H00D8FF&\fs40} stores the memory address of the current instruction.
Dialogue: 0,0:02:20.80,0:02:24.25,720P-CN,,0,0,0,,接着需要另一个寄存器存储当前的指令\N{\c&H00D8FF&\fs40}And then we need the other register to store the current instruction,
Comment: 0,0:02:20.80,0:02:24.25,720P-CN,,0,0,0,,还需要一个寄存器保存当前指令\N{\c&H00D8FF&\fs40}And then we need the other register to store the current instruction,
Dialogue: 0,0:02:24.25,0:02:26.25,720P-CN,,0,0,0,,我们把它叫做指令寄存器\N{\c&H00D8FF&\fs40}which we'll call the instruction register.
Comment: 0,0:02:24.25,0:02:26.25,720P-CN,,0,0,0,,称为指令寄存器\N{\c&H00D8FF&\fs40}which we'll call the instruction register.
Dialogue: 0,0:02:26.25,0:02:29.90,720P-CN,,0,0,0,,当初始化计算机时 所有的寄存器以0开始\N{\c&H00D8FF&\fs40}When we first boot up our computer, all of our registers start at 0.
Comment: 0,0:02:26.25,0:02:29.90,720P-CN,,0,0,0,,计算机启动时 所有的寄存器的值都初始化为0\N{\c&H00D8FF&\fs40}When we first boot up our computer, all of our registers start at 0.
Dialogue: 0,0:02:29.90,0:02:33.90,720P-CN,,0,0,0,,举个例子 我们在RAM里预置一个简单的计算机程序\N{\c&H00D8FF&\fs40}As an example, we've initialized our RAM with a simple computer program
Comment: 0,0:02:29.90,0:02:33.90,720P-CN,,0,0,0,,接下来我们会讲解\N{\c&H00D8FF&\fs40}As an example, we've initialized our RAM with a simple computer program
Dialogue: 0,0:02:33.90,0:02:35.25,720P-CN,,0,0,0,,接下来会执行一遍\N{\c&H00D8FF&\fs40}that we'll go through today.
Comment: 0,0:02:33.90,0:02:35.25,720P-CN,,0,0,0,,如何用一个简单计算机程序初始化RAM\N{\c&H00D8FF&\fs40}that we'll go through today.
Dialogue: 0,0:02:35.25,0:02:38.65,720P-CN,,0,0,0,,CPU运行的第一个阶段叫做读取阶段\N{\c&H00D8FF&\fs40}The first phase of a CPU's operation is called the fetch phase.
Comment: 0,0:02:35.25,0:02:38.65,720P-CN,,0,0,0,,CPU运行的第一个阶段叫做取指阶段\N{\c&H00D8FF&\fs40}The first phase of a CPU's operation is called the fetch phase.
Dialogue: 0,0:02:35.25,0:02:40.00,FOOT-NOTE,,0,0,0,,{\pos(116,52)}【注：几乎所有的冯•诺伊曼型计算机的CPU，其工作都可以分为5个阶段：\N1.取指令 2.指令译码 3.执行指令 4.访存+取数 5.结果写回】
Dialogue: 0,0:02:38.65,0:02:41.30,720P-CN,,0,0,0,,这一阶段我们检索第一条指令\N{\c&H00D8FF&\fs40}This is where we retrieve our first instruction.
Comment: 0,0:02:38.65,0:02:41.30,720P-CN,,0,0,0,,这个阶段将获取第一条指令\N{\c&H00D8FF&\fs40}This is where we retrieve our first instruction.
Dialogue: 0,0:02:41.30,0:02:44.70,720P-CN,,0,0,0,,首先 把指令地址寄存器连接到RAM模块\N{\c&H00D8FF&\fs40}First, we wire our Instruction Address Register to our RAM module.
Comment: 0,0:02:41.30,0:02:44.70,720P-CN,,0,0,0,,首先 连接指令地址寄存器与RAM模块\N{\c&H00D8FF&\fs40}First, we wire our Instruction Address Register to our RAM module.
Dialogue: 0,0:02:44.70,0:02:49.30,720P-CN,,0,0,0,,寄存器的数值是0 所以RAM返回地址0储存的数值\N{\c&H00D8FF&\fs40}The register's value is 0, so the RAM returns whatever value is stored in address 0.
Dialogue: 0,0:02:49.30,0:02:52.30,720P-CN,,0,0,0,,本例中是00101110\N{\c&H00D8FF&\fs40}In this case, 0010 1110.
Comment: 0,0:02:49.30,0:02:52.30,720P-CN,,0,0,0,,本例中值是{\u1}0010 1110{\u0}\N{\c&H00D8FF&\fs40}In this case, 0010 1110.
Dialogue: 0,0:02:52.30,0:02:55.25,720P-CN,,0,0,0,,接着这个数值拷贝到指令寄存器中\N{\c&H00D8FF&\fs40}Then this value is copied into our instruction register.
Comment: 0,0:02:52.30,0:02:55.25,720P-CN,,0,0,0,,然后 这个值被复制到指令寄存器\N{\c&H00D8FF&\fs40}Then this value is copied into our instruction register.
Dialogue: 0,0:02:55.25,0:02:57.25,720P-CN,,0,0,0,,我们已经检索到了存储器中的指令\N{\c&H00D8FF&\fs40}Now that we've fetched an instruction from memory,
Comment: 0,0:02:55.25,0:02:57.25,720P-CN,,0,0,0,,我们已经从内存里取到了指令\N{\c&H00D8FF&\fs40}Now that we've fetched an instruction from memory,
Dialogue: 0,0:02:57.25,0:02:59.25,720P-CN,,0,0,0,,就需要弄清这个指令是什么\N{\c&H00D8FF&\fs40}we need to figure out what that instruction is
Comment: 0,0:02:57.25,0:03:00.65,720P-CN,,0,0,0,,为了执行指令 还需要弄明白指令的内容\N{\c&H00D8FF&\fs40}we need to figure out what that instruction is so we can execute it.
Dialogue: 0,0:02:59.25,0:03:00.65,720P-CN,,0,0,0,,才能执行它\N{\c&H00D8FF&\fs40}so we can execute it.
Dialogue: 0,0:02:59.25,0:03:00.65,720P-CN,,0,0,0,,以便执行指令\N{\c&H00D8FF&\fs40}so we can execute it.
Dialogue: 0,0:03:00.65,0:03:02.45,720P-CN,,0,0,0,,是运行 不是处决它\N{\c&H00D8FF&\fs40}That is run it. Not kill it.
Dialogue: 0,0:03:00.65,0:03:02.45,FOOT-NOTE,,0,0,0,,{\pos(296,28)}【注：execute既有“执行”，也有“行刑”之意】
Dialogue: 0,0:03:02.45,0:03:04.45,720P-CN,,0,0,0,,这阶段叫做破译阶段\N{\c&H00D8FF&\fs40}This is called the decode phase.
Comment: 0,0:03:02.45,0:03:04.45,720P-CN,,0,0,0,,这阶段叫做译码阶段\N{\c&H00D8FF&\fs40}This is called the decode phase.
Dialogue: 0,0:03:04.45,0:03:09.10,720P-CN,,0,0,0,,本例中操作码 即前4位 是0010\N{\c&H00D8FF&\fs40}In this case the opcode, which is the first four bits, is: 0010.
Comment: 0,0:03:04.45,0:03:09.10,720P-CN,,0,0,0,,本例中前四位代表的操作码是{\u1}0010{\u0}\N{\c&H00D8FF&\fs40}In this case the opcode, which is the first four bits, is: 0010.
Dialogue: 0,0:03:09.10,0:03:12.00,720P-CN,,0,0,0,,这个操作码对应 LOAD A 指令\N{\c&H00D8FF&\fs40}This opcode corresponds to the “LOAD A” instruction,
Dialogue: 0,0:03:12.00,0:03:14.00,720P-CN,,0,0,0,,即把RAM中的数值载入到寄存器A中 \N{\c&H00D8FF&\fs40}which loads a value from RAM into Register A.
Dialogue: 0,0:03:14.00,0:03:20.00,720P-CN,,0,0,0,,RAM的地址是后4位 1110 或是十进制的14\N{\c&H00D8FF&\fs40}The RAM address is the last four bits of our instruction which are 1110, or 14 in decimal.
Comment: 0,0:03:14.00,0:03:20.00,720P-CN,,0,0,0,,RAM的地址是指令后4位{\u1}1110{\u0} 或是十进制的14\N{\c&H00D8FF&\fs40}The RAM address is the last four bits of our instruction which are 1110, or 14 in decimal.
Dialogue: 0,0:03:20.00,0:03:23.35,720P-CN,,0,0,0,,接着指令由控制单元破解说明\N{\c&H00D8FF&\fs40}Next, instructions are decoded and interpreted by a Control Unit.
Comment: 0,0:03:20.00,0:03:23.35,720P-CN,,0,0,0,,接着控制器译码并解释指令\N{\c&H00D8FF&\fs40}Next, instructions are decoded and interpreted by a Control Unit.
Dialogue: 0,0:03:23.35,0:03:26.30,720P-CN,,0,0,0,,与其他所有我们构建的元件 控制单元也是由逻辑门组成的\N{\c&H00D8FF&\fs40}Like everything else we've built, it too is made out of logic gates.
Comment: 0,0:03:23.35,0:03:26.30,720P-CN,,0,0,0,,控制器与我们构建的其他元件一样 也是由逻辑门组成的\N{\c&H00D8FF&\fs40}Like everything else we've built, it too is made out of logic gates.
Dialogue: 0,0:03:26.30,0:03:30.50,720P-CN,,0,0,0,,例如 要识别LOAD A指令 需要一个电路检查\N{\c&H00D8FF&\fs40}For example, to recognize a LOAD_A instruction, we need a circuit that checks
Comment: 0,0:03:26.30,0:03:30.50,720P-CN,,0,0,0,,例如 要识别LOAD A指令\N{\c&H00D8FF&\fs40}For example, to recognize a LOAD_A instruction, we need a circuit that checks
Dialogue: 0,0:03:30.50,0:03:35.45,720P-CN,,0,0,0,,是否操作码与0010一致 这用一堆逻辑门就能检验\N{\c&H00D8FF&\fs40} if the opcode matches 0010 which we can do with a handful of logic gates.
Comment: 0,0:03:30.50,0:03:35.45,720P-CN,,0,0,0,,需要电路检查操作码是否为{\u1}0010{\u0} 这可以通过一系列逻辑门实现\N{\c&H00D8FF&\fs40} if the opcode matches 0010 which we can do with a handful of logic gates.
Dialogue: 0,0:03:35.45,0:03:37.25,720P-CN,,0,0,0,,现在已经知道指令是什么了\N{\c&H00D8FF&\fs40}Now that we know what instruction we're dealing with,
Comment: 0,0:03:35.45,0:03:37.25,720P-CN,,0,0,0,,知道了指令的内容\N{\c&H00D8FF&\fs40}Now that we know what instruction we're dealing with,
Dialogue: 0,0:03:37.25,0:03:41.00,720P-CN,,0,0,0,,我们可以前进去执行这个指令 也就开始了执行阶段\N{\c&H00D8FF&\fs40}we can go ahead and perform that instruction which is the beginning of the execute phase!\N
Comment: 0,0:03:37.25,0:03:41.00,720P-CN,,0,0,0,,我们可以接着执行指令 这也是执行阶段的开始\N{\c&H00D8FF&\fs40}we can go ahead and perform that instruction which is the beginning of the execute phase!\N
Dialogue: 0,0:03:41.00,0:03:43.95,720P-CN,,0,0,0,,通过LOAD_A检查电路的输出\N{\c&H00D8FF&\fs40}Using the output of our LOAD_A checking circuit,
Comment: 0,0:03:41.00,0:03:43.95,720P-CN,,0,0,0,,利用LOAD_A检查电路的输出\N{\c&H00D8FF&\fs40}Using the output of our LOAD_A checking circuit,
Dialogue: 0,0:03:43.95,0:03:47.25,720P-CN,,0,0,0,,开启RAM的读取电路并发送到地址14\N{\c&H00D8FF&\fs40}we can turn on the RAM's read enable line and send in address 14.
Comment: 0,0:03:43.95,0:03:47.25,720P-CN,,0,0,0,,我们可以开启RAM的允许读取线并发送内存地址14\N{\c&H00D8FF&\fs40}we can turn on the RAM's read enable line and send in address 14.
Dialogue: 0,0:03:47.25,0:03:53.70,720P-CN,,0,0,0,,RAM获取这个地址的数值00000011（十进制3）\N{\c&H00D8FF&\fs40}The RAM retrieves the value at that address, which is 00000011, or 3 in decimal.
Comment: 0,0:03:47.25,0:03:53.70,720P-CN,,0,0,0,,RAM获取这个地址的数值{\u1}0000 0011{\u0}（十进制3）\N{\c&H00D8FF&\fs40}The RAM retrieves the value at that address, which is 00000011, or 3 in decimal.
Dialogue: 0,0:03:53.70,0:03:55.70,720P-CN,,0,0,0,,因为是LOAD_A指令\N{\c&H00D8FF&\fs40}Now, because this is a LOAD_A instruction,
Comment: 0,0:03:53.70,0:03:55.70,720P-CN,,0,0,0,,因为这是LOAD_A指令\N{\c&H00D8FF&\fs40}Now, because this is a LOAD_A instruction,
Dialogue: 0,0:03:55.70,0:03:59.95,720P-CN,,0,0,0,,我们只把它保存在寄存器A中 其他的不变\N{\c&H00D8FF&\fs40} we want that value to only be saved into Register A and not any of the other registers.
Comment: 0,0:03:55.70,0:03:59.95,720P-CN,,0,0,0,,我们只想在寄存器A中保存值 其他寄存器不受影响\N{\c&H00D8FF&\fs40} we want that value to only be saved into Register A and not any of the other registers.
Dialogue: 0,0:03:59.95,0:04:03.15,720P-CN,,0,0,0,,所以如果我们吧RAM的数据线路接到4个数据寄存器\N{\c&H00D8FF&\fs40}So if we connect the RAM's data wires to our four data registers,
Comment: 0,0:03:59.95,0:04:03.15,720P-CN,,0,0,0,,所以如果我们把RAM的数据线与4个数据寄存器相连\N{\c&H00D8FF&\fs40}So if we connect the RAM's data wires to our four data registers,
Dialogue: 0,0:04:03.15,0:04:07.80,720P-CN,,0,0,0,,可以通过LOAD_A的检查电路只开启寄存器A的写入电路\N{\c&H00D8FF&\fs40}we can use our LOAD_A check circuit to turn on the write enable only for Register A.
Comment: 0,0:04:03.15,0:04:07.80,720P-CN,,0,0,0,,通过LOAD_A检查电路 可以只打开寄存器A的允许写入\N{\c&H00D8FF&\fs40}we can use our LOAD_A check circuit to turn on the write enable only for Register A.
Dialogue: 0,0:04:07.80,0:04:12.70,720P-CN,,0,0,0,,这样就成功了 把RAM地址14的数值放入寄存器A\N{\c&H00D8FF&\fs40}And there you have it - we’ve successfully loaded the value at RAM address 14 into Register A.
Comment: 0,0:04:07.80,0:04:12.70,720P-CN,,0,0,0,,这样就成功了 把RAM地址14的值加载到了寄存器A\N{\c&H00D8FF&\fs40}And there you have it - we’ve successfully loaded the value at RAM address 14 into Register A.
Dialogue: 0,0:04:12.70,0:04:16.05,720P-CN,,0,0,0,,完成了指令后 就可以关闭所有的电路\N{\c&H00D8FF&\fs40}We've completed the instruction, so we can turn all of our wires off,
Comment: 0,0:04:12.70,0:04:16.05,720P-CN,,0,0,0,,指令完成 关闭所有连接\N{\c&H00D8FF&\fs40}We've completed the instruction, so we can turn all of our wires off,
Dialogue: 0,0:04:16.05,0:04:18.95,720P-CN,,0,0,0,,准备好检索存储器中下一条指令了\N{\c&H00D8FF&\fs40}and we're ready to fetch the next instruction in memory.
Comment: 0,0:04:16.05,0:04:18.95,720P-CN,,0,0,0,,准备好取内存里的下一条指令\N{\c&H00D8FF&\fs40}and we're ready to fetch the next instruction in memory.
Dialogue: 0,0:04:18.95,0:04:22.20,720P-CN,,0,0,0,,要进入下一条 我们把指令地址寄存器加1\N{\c&H00D8FF&\fs40}To do this, we increment the Instruction Address Register by 1
Comment: 0,0:04:18.95,0:04:22.20,720P-CN,,0,0,0,,我们把指令地址寄存器加1\N{\c&H00D8FF&\fs40}To do this, we increment the Instruction Address Register by 1
Dialogue: 0,0:04:22.20,0:04:23.85,720P-CN,,0,0,0,,便完成了执行阶段\N{\c&H00D8FF&\fs40}which completes the execute phase.
Comment: 0,0:04:22.20,0:04:23.85,720P-CN,,0,0,0,,完成执行阶段\N{\c&H00D8FF&\fs40}which completes the execute phase.
Dialogue: 0,0:04:23.85,0:04:28.30,720P-CN,,0,0,0,,LOAD_A只是CPU能执行的众多指令中的一个\N{\c&H00D8FF&\fs40}LOAD_A is just one of several possible instructions that our CPU can execute.
Comment: 0,0:04:23.85,0:04:28.30,720P-CN,,0,0,0,,LOAD_A只是CPU众多指令中的一个\N{\c&H00D8FF&\fs40}LOAD_A is just one of several possible instructions that our CPU can execute.
Dialogue: 0,0:04:28.30,0:04:31.10,720P-CN,,0,0,0,,不同的指令用不同的逻辑电路破译\N{\c&H00D8FF&\fs40}Different instructions are decoded by different logic circuits,
Comment: 0,0:04:28.30,0:04:31.10,720P-CN,,0,0,0,,不同的指令由不同的逻辑电路\N{\c&H00D8FF&\fs40}Different instructions are decoded by different logic circuits,
Comment: 0,0:04:31.10,0:04:34.20,720P-CN,,0,0,0,,配置CPU的组件以实现译码\N{\c&H00D8FF&\fs40}which configure the CPU's components to perform that action.
Dialogue: 0,0:04:31.10,0:04:34.20,720P-CN,,0,0,0,,逻辑电路配置CPU的部件去执行这个行动\N{\c&H00D8FF&\fs40}which configure the CPU's components to perform that action.
Dialogue: 0,0:04:34.20,0:04:37.40,720P-CN,,0,0,0,,这些破译电路内部有过多的细节\N{\c&H00D8FF&\fs40}Looking at all those individual decode circuits is too much detail,
Comment: 0,0:04:34.20,0:04:37.40,720P-CN,,0,0,0,,译码电路的内部细节太多了\N{\c&H00D8FF&\fs40}Looking at all those individual decode circuits is too much detail,
Dialogue: 0,0:04:37.40,0:04:38.85,720P-CN,,0,0,0,,所以既然我们看过了一个例子\N{\c&H00D8FF&\fs40}so since we looked at one example,
Comment: 0,0:04:37.40,0:04:38.85,720P-CN,,0,0,0,,而且我们已经看过了一个例子\N{\c&H00D8FF&\fs40}so since we looked at one example,
Dialogue: 0,0:04:38.85,0:04:40.45,720P-CN,,0,0,0,,那就向前进而把他们封装起来\N{\c&H00D8FF&\fs40}we've going to go head and package them all up
Comment: 0,0:04:38.85,0:04:40.45,720P-CN,,0,0,0,,接下来我们会把细节封装起来\N{\c&H00D8FF&\fs40}we've going to go head and package them all up
Dialogue: 0,0:04:40.45,0:04:43.15,720P-CN,,0,0,0,,作为一个单独的控制单元使问题简单\N{\c&H00D8FF&\fs40}as a single Control Unit to keep things simple.
Comment: 0,0:04:40.45,0:04:43.15,720P-CN,,0,0,0,,整体看作一个控制器 以便于理解\N{\c&H00D8FF&\fs40}as a single Control Unit to keep things simple.
Dialogue: 0,0:04:43.15,0:04:45.75,720P-CN,,0,0,0,,那是新的一层抽象\N{\c&H00D8FF&\fs40}That's right a new level of abstraction.
Comment: 0,0:04:43.15,0:04:45.75,720P-CN,,0,0,0,,没错 又一层抽象\N{\c&H00D8FF&\fs40}That's right a new level of abstraction.
Dialogue: 0,0:04:51.35,0:04:54.60,720P-CN,,0,0,0,,控制单元就像是乐团的指挥\N{\c&H00D8FF&\fs40}The Control Unit is comparable to the conductor of an orchestra,
Comment: 0,0:04:51.35,0:04:54.60,720P-CN,,0,0,0,,控制器就像交响乐团的指挥\N{\c&H00D8FF&\fs40}The Control Unit is comparable to the conductor of an orchestra,
Dialogue: 0,0:04:54.60,0:04:56.75,720P-CN,,0,0,0,,指挥着CPU的所有不同组份\N{\c&H00D8FF&\fs40}directing all of the different parts of the CPU.
Comment: 0,0:04:54.60,0:04:56.75,720P-CN,,0,0,0,,引导CPU的各部分\N{\c&H00D8FF&\fs40}directing all of the different parts of the CPU.
Dialogue: 0,0:04:56.75,0:05:00.05,720P-CN,,0,0,0,,完成了一个 检索 破译 执行 循环\N{\c&H00D8FF&\fs40}Having completed one full fetch/decode/execute cycle,
Comment: 0,0:04:56.75,0:05:00.05,720P-CN,,0,0,0,,在完成一个 取指 译码 执行的完整周期后\N{\c&H00D8FF&\fs40}Having completed one full fetch/decode/execute cycle,
Dialogue: 0,0:05:00.05,0:05:03.65,720P-CN,,0,0,0,,就可以重头开始 开始检索阶段\N{\c&H00D8FF&\fs40}we're ready to start all over again, beginning with the fetch phase.
Comment: 0,0:05:00.05,0:05:03.65,720P-CN,,0,0,0,,我们又可以从取指阶段重新开始\N{\c&H00D8FF&\fs40}we're ready to start all over again, beginning with the fetch phase.
Dialogue: 0,0:05:03.65,0:05:06.65,720P-CN,,0,0,0,,指令地址寄存器的数值是1\N{\c&H00D8FF&\fs40}The Instruction Address Register now has the value 1 in it,
Dialogue: 0,0:05:06.65,0:05:12.20,720P-CN,,0,0,0,,RAM提供的地址为1的数值是{\u1}0001 1111{\u0}\N{\c&H00D8FF&\fs40}so the RAM gives us the value stored at address 1, which is 0001 1111.
Dialogue: 0,0:05:12.20,0:05:13.60,720P-CN,,0,0,0,,继续到破译阶段\N{\c&H00D8FF&\fs40}On to the decode phase!
Comment: 0,0:05:12.20,0:05:13.60,720P-CN,,0,0,0,,又到了译码阶段\N{\c&H00D8FF&\fs40}On to the decode phase!
Dialogue: 0,0:05:13.60,0:05:19.75,720P-CN,,0,0,0,,{\u1}0001{\u0}是LOAD_B指令 即把RAM的数值传给寄存器B\N{\c&H00D8FF&\fs40}0001 is the “LOAD_B” instruction, which moves a value from RAM into Register B.
Dialogue: 0,0:05:19.75,0:05:24.55,720P-CN,,0,0,0,,这一次存储器的地址是1111（十进制的15）\N{\c&H00D8FF&\fs40}The memory location this time is 1111, which is 15 in decimal.
Comment: 0,0:05:19.75,0:05:24.55,720P-CN,,0,0,0,,这一次内存地址是{\u1}1111{\u0}（十进制的15）\N{\c&H00D8FF&\fs40}The memory location this time is 1111, which is 15 in decimal.
Dialogue: 0,0:05:24.55,0:05:26.20,720P-CN,,0,0,0,,然后到执行阶段\N{\c&H00D8FF&\fs40}Now to the execute phase!
Dialogue: 0,0:05:26.20,0:05:29.45,720P-CN,,0,0,0,,控制单元配置RAM读取地址15的数值\N{\c&H00D8FF&\fs40}The Control Unit configures the RAM to read address 15 and
Comment: 0,0:05:26.20,0:05:29.45,720P-CN,,0,0,0,,控制器配置RAM读取地址15的数值\N{\c&H00D8FF&\fs40}The Control Unit configures the RAM to read address 15 and
Dialogue: 0,0:05:29.45,0:05:31.75,720P-CN,,0,0,0,,并配置寄存器B接受数据\N{\c&H00D8FF&\fs40}configures Register B to receive the data.
Dialogue: 0,0:05:31.75,0:05:38.95,720P-CN,,0,0,0,,好 我们就保存了数值00001110（十进制14）进了寄存器B\N{\c&H00D8FF&\fs40}Bingo, we just saved the value 00001110, or the number 14 in decimal, into Register B.
Comment: 0,0:05:31.75,0:05:38.95,720P-CN,,0,0,0,,好 我们把数值{\u1}0000 1110{\u0}（十进制14）保存到了寄存器B\N{\c&H00D8FF&\fs40}Bingo, we just saved the value 00001110, or the number 14 in decimal, into Register B.
Dialogue: 0,0:05:38.95,0:05:42.05,720P-CN,,0,0,0,,最后一步是把指令地址寄存器加1\N{\c&H00D8FF&\fs40}Last thing to do is increment our instruction address register by 1,
Dialogue: 0,0:05:42.05,0:05:43.60,720P-CN,,0,0,0,,这样就完成了又一个循环\N{\c&H00D8FF&\fs40}and we're done with another cycle.
Comment: 0,0:05:42.05,0:05:43.60,720P-CN,,0,0,0,,这样就又完成了一个周期\N{\c&H00D8FF&\fs40}and we're done with another cycle.
Dialogue: 0,0:05:43.60,0:05:45.60,720P-CN,,0,0,0,,下一条指令有一些不同\N{\c&H00D8FF&\fs40}Our next instruction is a bit different.
Dialogue: 0,0:05:45.60,0:05:46.35,720P-CN,,0,0,0,,拿来看看\N{\c&H00D8FF&\fs40}Let's fetch it.
Dialogue: 0,0:05:46.35,0:05:49.15,720P-CN,,0,0,0,,是{\u1}1000 01 00{\u0}\N{\c&H00D8FF&\fs40}1000 01 00.
Dialogue: 0,0:05:49.15,0:05:53.25,720P-CN,,0,0,0,,操作码{\u1}1000{\u0}是加法指令\N{\c&H00D8FF&\fs40}That opcode 1000 is an ADD instruction.
Dialogue: 0,0:05:53.25,0:05:57.05,720P-CN,,0,0,0,,与4位的RAM地址不同 这条指令用了两组2位数\N{\c&H00D8FF&\fs40}Instead of an 4-bit RAM address, this instruction uses two sets of 2 bits.
Comment: 0,0:05:53.25,0:05:57.05,720P-CN,,0,0,0,,与4位的RAM地址不同 这条指令用了两组2位二进制数\N{\c&H00D8FF&\fs40}Instead of an 4-bit RAM address, this instruction uses two sets of 2 bits.
Dialogue: 0,0:05:57.05,0:06:00.05,720P-CN,,0,0,0,,记住2位可以编码4个值\N{\c&H00D8FF&\fs40}Remember that 2 bits can encode 4 values,
Comment: 0,0:05:57.05,0:06:00.05,720P-CN,,0,0,0,,记住2位二进制数可以表示4个值\N{\c&H00D8FF&\fs40}Remember that 2 bits can encode 4 values,
Dialogue: 0,0:06:00.05,0:06:02.85,720P-CN,,0,0,0,,所以2位足够选择4个寄存器了\N{\c&H00D8FF&\fs40} so 2 bits is enough to select any one of our 4 registers.
Comment: 0,0:06:00.05,0:06:02.85,720P-CN,,0,0,0,,所以它足以表示4个寄存器里的任意一个\N{\c&H00D8FF&\fs40} so 2 bits is enough to select any one of our 4 registers.
Dialogue: 0,0:06:02.85,0:06:06.90,720P-CN,,0,0,0,,第一组2位数是{\u1}01{\u0} 这里对应寄存器B\N{\c&H00D8FF&\fs40}The first set of 2 bits is 01, which in this case corresponds to Register B,
Dialogue: 0,0:06:06.90,0:06:08.90,720P-CN,,0,0,0,,另一组是{\u1}00{\u0} 是寄存器A\N{\c&H00D8FF&\fs40}and 00, which is Register A.
Dialogue: 0,0:06:08.90,0:06:15.45,720P-CN,,0,0,0,,所以{\u1}1000 01 00{\u0}是把寄存器B的数值\N{\c&H00D8FF&\fs40}So “1000 01 00” is the instruction for adding the value in Register B
Dialogue: 0,0:06:15.45,0:06:17.45,720P-CN,,0,0,0,,加到寄存器A里\N{\c&H00D8FF&\fs40}into the value in register A.
Dialogue: 0,0:06:17.45,0:06:19.10,720P-CN,,0,0,0,,所以要执行这个指令\N{\c&H00D8FF&\fs40}So to execute this instruction,
Dialogue: 0,0:06:19.10,0:06:23.30,720P-CN,,0,0,0,,需要把第5集的ALU整合到CPU里\N{\c&H00D8FF&\fs40}we need to integrate the ALU we made in Episode 5 into our CPU.
Comment: 0,0:06:19.10,0:06:23.30,720P-CN,,0,0,0,,需要把第5集的ALU集成到CPU里\N{\c&H00D8FF&\fs40}we need to integrate the ALU we made in Episode 5 into our CPU.
Dialogue: 0,0:06:23.30,0:06:27.30,720P-CN,,0,0,0,,控制单元负责选择正确的寄存器传递输入（给ALU)\N{\c&H00D8FF&\fs40}The Control Unit is responsible for selecting the right registers to pass in as inputs,
Comment: 0,0:06:23.30,0:06:27.30,720P-CN,,0,0,0,,控制器将正确的寄存器作为输入（传给ALU)\N{\c&H00D8FF&\fs40}The Control Unit is responsible for selecting the right registers to pass in as inputs,
Dialogue: 0,0:06:27.30,0:06:29.85,720P-CN,,0,0,0,,并配置ALU执行正确的运算\N{\c&H00D8FF&\fs40}and configuring the ALU to perform the right operation.
Dialogue: 0,0:06:29.85,0:06:33.95,720P-CN,,0,0,0,,这个加法运算中 控制单元开启寄存器B \N{\c&H00D8FF&\fs40}For this ADD instruction, the Control Unit enables Register B and
Comment: 0,0:06:29.85,0:06:33.95,720P-CN,,0,0,0,,这个加法运算中 控制器开启寄存器B \N{\c&H00D8FF&\fs40}For this ADD instruction, the Control Unit enables Register B and
Dialogue: 0,0:06:33.95,0:06:36.50,720P-CN,,0,0,0,,把它的数值作为ALU的第一个输入\N{\c&H00D8FF&\fs40}feeds its value into the first input of the ALU.
Dialogue: 0,0:06:36.50,0:06:40.60,720P-CN,,0,0,0,,同样的开启寄存器A 作为ALU的第二个输入\N{\c&H00D8FF&\fs40}It also enables Register A and feeds it into the second ALU input.
Dialogue: 0,0:06:40.60,0:06:44.95,720P-CN,,0,0,0,,前面已经提到 ALU可以执行多种运算\N{\c&H00D8FF&\fs40}As we already discussed, the ALU itself can perform several different operations,
Dialogue: 0,0:06:44.95,0:06:48.40,720P-CN,,0,0,0,,所以控制单元配置它去执行加法运算\N{\c&H00D8FF&\fs40}so the Control Unit must configure it to perform an ADD operation
Comment: 0,0:06:44.95,0:06:48.40,720P-CN,,0,0,0,,所以控制器通过传递加法操作码\N{\c&H00D8FF&\fs40}so the Control Unit must configure it to perform an ADD operation
Dialogue: 0,0:06:48.40,0:06:50.40,720P-CN,,0,0,0,,通过加法操作码的传递\N{\c&H00D8FF&\fs40}by passing in the ADD opcode.
Comment: 0,0:06:48.40,0:06:50.40,720P-CN,,0,0,0,,确保ALU执行加法运算\N{\c&H00D8FF&\fs40}by passing in the ADD opcode.
Dialogue: 0,0:06:50.40,0:06:54.70,720P-CN,,0,0,0,,最后输出应该存在寄存器A中 但是不能直接写入\N{\c&H00D8FF&\fs40}Finally, the output should be saved into Register A. But it can't be written directly
Dialogue: 0,0:06:54.70,0:06:58.45,720P-CN,,0,0,0,,因为新的值会再一次传到ALU而一直加下去\N{\c&H00D8FF&\fs40}because the new value would ripple back into the ALU and then keep adding to itself.
Dialogue: 0,0:06:58.45,0:07:03.10,720P-CN,,0,0,0,,控制单元用一个内部的寄存器临时保存输出\N{\c&H00D8FF&\fs40}So the Control Unit uses an internal register to temporarily save the output,
Comment: 0,0:06:58.45,0:07:03.10,720P-CN,,0,0,0,,控制器用一个内部的寄存器临时保存输出\N{\c&H00D8FF&\fs40}So the Control Unit uses an internal register to temporarily save the output,
Dialogue: 0,0:07:03.10,0:07:07.65,720P-CN,,0,0,0,,关闭ALU再把数值写入合适的目标寄存器\N{\c&H00D8FF&\fs40}turn off the ALU, and then write the value into the proper destination register.
Comment: 0,0:07:03.10,0:07:07.65,720P-CN,,0,0,0,,关闭ALU再把数值写入目标寄存器\N{\c&H00D8FF&\fs40}turn off the ALU, and then write the value into the proper destination register.
Dialogue: 0,0:07:07.65,0:07:15.75,720P-CN,,0,0,0,,这里 输入是3和14 因此和是17 或二进制的00010001\N{\c&H00D8FF&\fs40}In this case, our inputs were 3 and 14, and so the sum is 17, or 00010001 in binary,
Dialogue: 0,0:07:15.75,0:07:17.75,720P-CN,,0,0,0,,这个数储存在了寄存器A中\N{\c&H00D8FF&\fs40}which is now sitting in Register A.
Comment: 0,0:07:15.75,0:07:17.75,720P-CN,,0,0,0,,这个数保存在寄存器A里\N{\c&H00D8FF&\fs40}which is now sitting in Register A.
Dialogue: 0,0:07:17.75,0:07:21.50,720P-CN,,0,0,0,,跟前面一样 最后一步是把指令地址加1\N{\c&H00D8FF&\fs40}As before, the last thing to do is increment our instruction address by 1,
Dialogue: 0,0:07:21.50,0:07:23.30,720P-CN,,0,0,0,,于是又完成一个循环\N{\c&H00D8FF&\fs40}and another cycle is complete.
Comment: 0,0:07:21.50,0:07:23.30,720P-CN,,0,0,0,,又完成了一个周期\N{\c&H00D8FF&\fs40}and another cycle is complete.
Dialogue: 0,0:07:23.30,0:07:28.85,720P-CN,,0,0,0,,好的 检索最后一个指令\N{\c&H00D8FF&\fs40}Okay, so let's fetch one last instruction: 01001101.
Comment: 0,0:07:23.30,0:07:28.85,720P-CN,,0,0,0,,好的 取最后一个指令 {\u1}0100{\u0} {\u1}1101{\u0}\N{\c&H00D8FF&\fs40}Okay, so let's fetch one last instruction: 01001101.
Dialogue: 0,0:07:28.85,0:07:35.15,720P-CN,,0,0,0,,破译出来可以看到0100是STORE_A指令 附带的RAM地址是13\N{\c&H00D8FF&\fs40}When we decode it we see that 0100 is a STORE_A instruction, with a RAM address of 13.
Comment: 0,0:07:28.85,0:07:35.15,720P-CN,,0,0,0,,{\u1}0100{\u0}译码后是STORE_A指令 对应的RAM地址是13\N{\c&H00D8FF&\fs40}When we decode it we see that 0100 is a STORE_A instruction, with a RAM address of 13.
Dialogue: 0,0:07:35.15,0:07:37.85,720P-CN,,0,0,0,,跟通常一样 我们把地址传递到RAM模块\N{\c&H00D8FF&\fs40}As usual, we pass the address to the RAM module,
Comment: 0,0:07:35.15,0:07:37.85,720P-CN,,0,0,0,,我们照旧把地址发给RAM模块\N{\c&H00D8FF&\fs40}As usual, we pass the address to the RAM module,
Dialogue: 0,0:07:37.85,0:07:40.65,720P-CN,,0,0,0,,但不是开启存储器的读取功能 而是写入功能\N{\c&H00D8FF&\fs40}but instead of read-enabling the memory, we write-enable it.
Comment: 0,0:07:37.85,0:07:40.65,720P-CN,,0,0,0,,打开内存的允许写入 而不是允许读取\N{\c&H00D8FF&\fs40}but instead of read-enabling the memory, we write-enable it.
Dialogue: 0,0:07:40.65,0:07:43.55,720P-CN,,0,0,0,,同时开启寄存器A的读取功能\N{\c&H00D8FF&\fs40}At the same time, we read-enable Register A.
Comment: 0,0:07:40.65,0:07:43.55,720P-CN,,0,0,0,,同时开启寄存器A的允许读取\N{\c&H00D8FF&\fs40}At the same time, we read-enable Register A.
Dialogue: 0,0:07:43.55,0:07:47.75,720P-CN,,0,0,0,,这样我们就可以用数据线传输寄存器A中的数值\N{\c&H00D8FF&\fs40}This allows us to use the data line to pass in the value stored in register A.
Dialogue: 0,0:07:47.75,0:07:50.45,720P-CN,,0,0,0,,恭喜 我们刚刚运行完毕了第一个计算机程序\N{\c&H00D8FF&\fs40}Congrats, we just ran our first computer program!
Comment: 0,0:07:47.75,0:07:50.45,720P-CN,,0,0,0,,恭喜 我们刚刚执行了第一个计算机程序\N{\c&H00D8FF&\fs40}Congrats, we just ran our first computer program!
Dialogue: 0,0:07:50.45,0:07:53.45,720P-CN,,0,0,0,,它载入存储器中的两个数字并相加\N{\c&H00D8FF&\fs40}It loaded two values from memory, added them together,
Comment: 0,0:07:50.45,0:07:53.45,720P-CN,,0,0,0,,它载入内存中的两个数字并相加\N{\c&H00D8FF&\fs40}It loaded two values from memory, added them together,
Dialogue: 0,0:07:53.45,0:07:55.45,720P-CN,,0,0,0,,然后把和存回存储器\N{\c&H00D8FF&\fs40}and then saved that sum back into memory.
Comment: 0,0:07:53.45,0:07:55.45,720P-CN,,0,0,0,,然后把结算结果写回内存\N{\c&H00D8FF&\fs40}and then saved that sum back into memory.
Dialogue: 0,0:07:55.45,0:07:58.30,720P-CN,,0,0,0,,通过谈论每一步\N{\c&H00D8FF&\fs40}Of course, by me talking you through the individual steps,
Comment: 0,0:07:55.45,0:07:58.30,720P-CN,,0,0,0,,在我逐步讲解下\N{\c&H00D8FF&\fs40}Of course, by me talking you through the individual steps,
Dialogue: 0,0:07:58.30,0:08:03.15,720P-CN,,0,0,0,,我人工地将CPU在检索 破译和执行阶段中移动\N{\c&H00D8FF&\fs40}I was manually transitioning the CPU through its fetch, decode and execute phases.
Comment: 0,0:07:58.30,0:08:03.15,720P-CN,,0,0,0,,计算机在取指 译码 和执行的各阶段中转换\N{\c&H00D8FF&\fs40}I was manually transitioning the CPU through its fetch, decode and execute phases.
Dialogue: 0,0:08:03.15,0:08:06.30,720P-CN,,0,0,0,,可是计算机里没有迷你的凯莉·安\N{\c&H00D8FF&\fs40}But there isn't a mini Carrie Anne inside of every computer.
Dialogue: 0,0:08:06.30,0:08:10.85,720P-CN,,0,0,0,,所以让CPU持续行进的任务落到了叫时钟的部件上\N{\c&H00D8FF&\fs40}So the responsibility of keeping the CPU ticking along falls to a component called the clock.
Comment: 0,0:08:06.30,0:08:10.85,720P-CN,,0,0,0,,而是由时钟这个部件维持CPU的持续运转\N{\c&H00D8FF&\fs40}So the responsibility of keeping the CPU ticking along falls to a component called the clock.
Dialogue: 0,0:08:10.85,0:08:15.05,720P-CN,,0,0,0,,如它名字所示 时钟以精确而规律的间隔触发电子信号\N{\c&H00D8FF&\fs40}As it's name suggests, the clock triggers an electrical signal at a precise and regular interval.
Comment: 0,0:08:10.85,0:08:15.05,720P-CN,,0,0,0,,顾名思义 时钟以精确而规律的间隔触发电信号\N{\c&H00D8FF&\fs40}As it's name suggests, the clock triggers an electrical signal at a precise and regular interval.
Dialogue: 0,0:08:15.05,0:08:19.45,720P-CN,,0,0,0,,控制单元用这个信号提高CPU的内部运算\N{\c&H00D8FF&\fs40}Its signal is used by the Control Unit to advance the internal operation of the CPU,
Comment: 0,0:08:15.05,0:08:19.45,720P-CN,,0,0,0,,控制器用这个信号推进CPU的内部运行\N{\c&H00D8FF&\fs40}Its signal is used by the Control Unit to advance the internal operation of the CPU,
Dialogue: 0,0:08:19.45,0:08:23.65,720P-CN,,0,0,0,,保证一切按照时间的规律 像是罗马桨帆船上的人有节奏的击鼓\N{\c&H00D8FF&\fs40}keeping everything in lock-step - like the dude on a Roman galley drumming rhythmically
Comment: 0,0:08:19.45,0:08:23.65,720P-CN,,0,0,0,,保证一切井井有条 就像罗马桨帆船首的鼓手\N{\c&H00D8FF&\fs40}keeping everything in lock-step - like the dude on a Roman galley drumming rhythmically
Dialogue: 0,0:08:23.65,0:08:27.60,720P-CN,,0,0,0,,在船头上 保证桨手们协调一致 或者类似于节拍器\N{\c&H00D8FF&\fs40}at the front, keeping all the rowers synchronized... or a metronome.
Comment: 0,0:08:23.65,0:08:27.60,720P-CN,,0,0,0,,有节奏的敲鼓以保证桨手们协调一致 或者说 就是个节拍器\N{\c&H00D8FF&\fs40}at the front, keeping all the rowers synchronized... or a metronome.
Dialogue: 0,0:08:27.60,0:08:30.80,720P-CN,,0,0,0,,当然不能行进的太快 因为即使是电流\N{\c&H00D8FF&\fs40}Of course you can't go too fast, because even electricity takes some time
Comment: 0,0:08:27.60,0:08:30.80,720P-CN,,0,0,0,,当然节奏也不能太快\N{\c&H00D8FF&\fs40}Of course you can't go too fast, because even electricity takes some time
Dialogue: 0,0:08:30.80,0:08:33.50,720P-CN,,0,0,0,,沿导线传播和信号的确定都需要时间\N{\c&H00D8FF&\fs40} to travel down wires and for the signal to settle.
Comment: 0,0:08:30.80,0:08:33.50,720P-CN,,0,0,0,,因为电流传导和信号的稳定也需要一点时间\N{\c&H00D8FF&\fs40} to travel down wires and for the signal to settle.
Dialogue: 0,0:08:33.50,0:08:36.05,720P-CN,,0,0,0,,CPU运行检索 破译 执行循环中的每一步\N{\c&H00D8FF&\fs40}The speed at which a CPU can carry out each step of the
Comment: 0,0:08:33.50,0:08:36.05,720P-CN,,0,0,0,,CPU运行取指 译码 执行 周期中每一步的速度\N{\c&H00D8FF&\fs40}The speed at which a CPU can carry out each step of the
Dialogue: 0,0:08:36.05,0:08:39.50,720P-CN,,0,0,0,,的速度叫做时钟速度\N{\c&H00D8FF&\fs40} fetch-decode-execute cycle is called its Clock Speed.
Comment: 0,0:08:36.05,0:08:39.50,720P-CN,,0,0,0,,称为 时钟频率\N{\c&H00D8FF&\fs40} fetch-decode-execute cycle is called its Clock Speed.
Dialogue: 0,0:08:39.50,0:08:42.55,720P-CN,,0,0,0,,这一速度用赫兹度量 赫兹是频率的单位\N{\c&H00D8FF&\fs40}This speed is measured in Hertz - a unit of frequency.
Comment: 0,0:08:39.50,0:08:42.55,720P-CN,,0,0,0,,这个速度使用频率单位赫兹（Hz）描述\N{\c&H00D8FF&\fs40}This speed is measured in Hertz - a unit of frequency.
Dialogue: 0,0:08:42.55,0:08:45.15,720P-CN,,0,0,0,,一赫兹意味着每秒一圈循环\N{\c&H00D8FF&\fs40}One Hertz means one cycle per second.
Comment: 0,0:08:42.55,0:08:45.15,720P-CN,,0,0,0,,1Hz就是每秒1个周期\N{\c&H00D8FF&\fs40}One Hertz means one cycle per second.
Dialogue: 0,0:08:45.15,0:08:48.50,720P-CN,,0,0,0,,考虑到我花了6分钟谈论完4个指令\N{\c&H00D8FF&\fs40}Given that it took me about 6 minutes to talk you through 4 instructions --
Comment: 0,0:08:45.15,0:08:48.50,720P-CN,,0,0,0,,因为我用6分钟讲完\N{\c&H00D8FF&\fs40}Given that it took me about 6 minutes to talk you through 4 instructions --
Dialogue: 0,0:08:48.50,0:08:50.05,720P-CN,,0,0,0,,载入 载入 加法 储存\N{\c&H00D8FF&\fs40}LOAD, LOAD, ADD and STORE --
Comment: 0,0:08:48.50,0:08:50.05,720P-CN,,0,0,0,,载入 载入 加 保存 这4个指令\N{\c&H00D8FF&\fs40}LOAD, LOAD, ADD and STORE --
Dialogue: 0,0:08:50.05,0:08:53.85,720P-CN,,0,0,0,,意味着我有效的时钟速度大约是0.03赫兹\N{\c&H00D8FF&\fs40}that means I have an effective clock speed of roughly 0.03 Hertz.
Comment: 0,0:08:50.05,0:08:53.85,720P-CN,,0,0,0,,我的实际时钟频率大约是0.03Hz\N{\c&H00D8FF&\fs40}that means I have an effective clock speed of roughly 0.03 Hertz.
Dialogue: 0,0:08:53.85,0:08:57.75,720P-CN,,0,0,0,,我承认我不是优秀的计算者 但是即使擅长数学的人\N{\c&H00D8FF&\fs40}Admittedly, I'm not a great computer but even someone handy with math
Comment: 0,0:08:53.85,0:08:57.75,720P-CN,,0,0,0,,我承认自己不是个好计算姬（机）\N{\c&H00D8FF&\fs40}Admittedly, I'm not a great computer but even someone handy with math
Dialogue: 0,0:08:57.75,0:09:01.75,720P-CN,,0,0,0,,可能只能每秒在大脑中计算一次（1赫兹）\N{\c&H00D8FF&\fs40}might only be able to do one calculation in their head every second or 1 Hertz.
Comment: 0,0:08:57.75,0:09:01.75,720P-CN,,0,0,0,,但即便数学达人每秒也只不过能完成1次心算 或者 1Hz\N{\c&H00D8FF&\fs40}might only be able to do one calculation in their head every second or 1 Hertz.
Dialogue: 0,0:09:01.75,0:09:08.70,720P-CN,,0,0,0,,第一个单片的CPU是1971年发行的4位 Intel 4004 \N{\c&H00D8FF&\fs40}The very first, single-chip CPU was the Intel 4004, a 4-bit CPU released in 1971.
Comment: 0,0:09:01.75,0:09:08.70,720P-CN,,0,0,0,,第一个单片CPU是Intel 4004 只有4位 1971年上市\N{\c&H00D8FF&\fs40}The very first, single-chip CPU was the Intel 4004, a 4-bit CPU released in 1971.
Dialogue: 0,0:09:08.70,0:09:12.35,720P-CN,,0,0,0,,它的为结构与我们的示例CPU十分相似\N{\c&H00D8FF&\fs40}Its microarchitecture is actually pretty similar to our example CPU.
Comment: 0,0:09:08.70,0:09:12.35,720P-CN,,0,0,0,,它的微架构和我们的示例CPU很像\N{\c&H00D8FF&\fs40}Its microarchitecture is actually pretty similar to our example CPU.
Dialogue: 0,0:09:12.35,0:09:14.75,720P-CN,,0,0,0,,尽管是这类处理器的第一个\N{\c&H00D8FF&\fs40}Despite being the first processor of its kind,
Comment: 0,0:09:12.35,0:09:14.75,720P-CN,,0,0,0,,尽管是开山之作\N{\c&H00D8FF&\fs40}Despite being the first processor of its kind,
Dialogue: 0,0:09:14.75,0:09:22.35,720P-CN,,0,0,0,,它有者令人震惊的时钟速度 740千赫兹 每秒74万循环\N{\c&H00D8FF&\fs40}it had a mind-blowing clock speed of 740 Kilohertz-- that's 740 thousand cycles per second.
Comment: 0,0:09:14.75,0:09:22.35,720P-CN,,0,0,0,,它的时钟频率也达到了惊人的740kHz 即每秒74万个周期\N{\c&H00D8FF&\fs40}it had a mind-blowing clock speed of 740 Kilohertz-- that's 740 thousand cycles per second.
Dialogue: 0,0:09:22.35,0:09:26.20,720P-CN,,0,0,0,,你也许觉得很快 但与今天的处理器比微不足道\N{\c&H00D8FF&\fs40}You might think that's fast, but it's nothing compared to the processors that we use today.
Comment: 0,0:09:22.35,0:09:26.20,720P-CN,,0,0,0,,你也许觉得它很快 但与今天的处理器相比却显得微不足道\N{\c&H00D8FF&\fs40}You might think that's fast, but it's nothing compared to the processors that we use today.
Dialogue: 0,0:09:26.20,0:09:31.00,720P-CN,,0,0,0,,一兆赫兹是每秒一百万时钟循环 你现在看这个视频的\N{\c&H00D8FF&\fs40}One megahertz is one million clock cycles per second, and the computer or even phone
Comment: 0,0:09:26.20,0:09:31.00,720P-CN,,0,0,0,,1MHz是每秒100万时钟周期\N{\c&H00D8FF&\fs40}One megahertz is one million clock cycles per second, and the computer or even phone
Dialogue: 0,0:09:31.00,0:09:34.50,720P-CN,,0,0,0,,电脑甚至是手机无疑是几G赫兹\N{\c&H00D8FF&\fs40}that you are watching this video on right now is no doubt a few gigahertz --
Comment: 0,0:09:31.00,0:09:34.50,720P-CN,,0,0,0,,然而你现在看视频使用的电脑甚至是手机肯定是 几GHz\N{\c&H00D8FF&\fs40}that you are watching this video on right now is no doubt a few gigahertz --
Dialogue: 0,0:09:34.50,0:09:38.55,720P-CN,,0,0,0,,就是每 1 秒几十亿CPU循环\N{\c&H00D8FF&\fs40}that's BILLIONs of CPU cycles every… single... second.
Comment: 0,0:09:34.50,0:09:38.55,720P-CN,,0,0,0,,这是每秒数十亿个CPU周期\N{\c&H00D8FF&\fs40}that's BILLIONs of CPU cycles every… single... second.
Dialogue: 0,0:09:38.55,0:09:41.40,720P-CN,,0,0,0,,另外你也许听过调节计算机到超频\N{\c&H00D8FF&\fs40}Also, you may have heard of people overclocking their computers.
Comment: 0,0:09:38.55,0:09:41.40,720P-CN,,0,0,0,,另外你可能还听过有人超频计算机\N{\c&H00D8FF&\fs40}Also, you may have heard of people overclocking their computers.
Dialogue: 0,0:09:41.40,0:09:45.05,720P-CN,,0,0,0,,这是调节时钟提高CPU的速度\N{\c&H00D8FF&\fs40}This is when you modify the clock to speed up the tempo of the CPU --
Comment: 0,0:09:41.40,0:09:45.05,720P-CN,,0,0,0,,就是提高CPU的时钟频率\N{\c&H00D8FF&\fs40}This is when you modify the clock to speed up the tempo of the CPU --
Dialogue: 0,0:09:45.05,0:09:48.70,720P-CN,,0,0,0,,就像是罗马桨帆船上的鼓手加速擂鼓当需要撞向另一只船时\N{\c&H00D8FF&\fs40} like when the drummer speeds up when the Roman Galley needs to ram another ship.
Comment: 0,0:09:45.05,0:09:48.70,720P-CN,,0,0,0,,就像当需要撞向另一只船时 罗马桨帆船上的鼓手加速擂鼓一样\N{\c&H00D8FF&\fs40} like when the drummer speeds up when the Roman Galley needs to ram another ship.
Dialogue: 0,0:09:48.70,0:09:53.25,720P-CN,,0,0,0,,芯片制造者一般设给CPU设计对一定的超频足够的容忍度\N{\c&H00D8FF&\fs40}Chip makers often design CPUs with enough tolerance to handle a little bit of overclocking,
Comment: 0,0:09:48.70,0:09:53.25,720P-CN,,0,0,0,,芯片厂家一般会为CPU超频预留空间\N{\c&H00D8FF&\fs40}Chip makers often design CPUs with enough tolerance to handle a little bit of overclocking,
Dialogue: 0,0:09:53.25,0:09:55.25,720P-CN,,0,0,0,,但过度的超频会使CPU过热\N{\c&H00D8FF&\fs40}but too much can either overheat the CPU,
Comment: 0,0:09:53.25,0:09:55.25,720P-CN,,0,0,0,,{\pos(616,108)}但过度超频要么使CPU过热\N{\c&H00D8FF&\fs40}but too much can either overheat the CPU,
Dialogue: 0,0:09:54.00,0:09:57.25,FOOT-NOTE,,0,0,0,,{\pos(228,616)}注：超频通常不会让机箱起火
Dialogue: 0,0:09:55.25,0:09:57.90,720P-CN,,0,0,0,,或是由于信号落后于时钟产生冗余\N{\c&H00D8FF&\fs40}or produce gobbledygook as the signals fall behind the clock.
Comment: 0,0:09:55.25,0:09:57.90,720P-CN,,0,0,0,,{\pos(640,114)}要么由于信号慢于时钟出现蓝屏\N{\c&H00D8FF&\fs40}or produce gobbledygook as the signals fall behind the clock.
Dialogue: 0,0:09:57.90,0:10:01.65,720P-CN,,0,0,0,,尽管你对降频听到的不多 它实际上很有用\N{\c&H00D8FF&\fs40}And although you don't hear very much about underclocking, it's actually super useful.
Comment: 0,0:09:57.90,0:10:01.65,720P-CN,,0,0,0,,尽管你对降频所知不多 实际上它很有用\N{\c&H00D8FF&\fs40}And although you don't hear very much about underclocking, it's actually super useful.
Dialogue: 0,0:10:01.65,0:10:04.85,720P-CN,,0,0,0,,有时不必要全速运行处理器\N{\c&H00D8FF&\fs40}Sometimes it's not necessary to run the processor at full speed...
Comment: 0,0:10:01.65,0:10:04.85,720P-CN,,0,0,0,,有时没必要让处理器全速运转\N{\c&H00D8FF&\fs40}Sometimes it's not necessary to run the processor at full speed...
Dialogue: 0,0:10:04.85,0:10:08.75,720P-CN,,0,0,0,,也许用户离开了计算机 或者运行很费力的程序\N{\c&H00D8FF&\fs40}maybe the user has stepped away, or just not running a particularly demanding program.
Comment: 0,0:10:04.85,0:10:08.75,720P-CN,,0,0,0,,比如 用户可能走开了 或者仅在运行简单的程序\N{\c&H00D8FF&\fs40}maybe the user has stepped away, or just not running a particularly demanding program.
Dialogue: 0,0:10:08.75,0:10:12.00,720P-CN,,0,0,0,,通过降低CPU速度 可以节省很多的能量\N{\c&H00D8FF&\fs40}By slowing the CPU down, you can save a lot of power,
Comment: 0,0:10:08.75,0:10:12.00,720P-CN,,0,0,0,,CPU降速可以节省大量电力\N{\c&H00D8FF&\fs40}By slowing the CPU down, you can save a lot of power,
Dialogue: 0,0:10:12.00,0:10:15.70,720P-CN,,0,0,0,,这对使用电池的计算机 如笔记本和智能机 十分重要\N{\c&H00D8FF&\fs40}which is important for computers that run on batteries, like laptops and smartphones.
Comment: 0,0:10:12.00,0:10:15.70,720P-CN,,0,0,0,,这对依赖电池的计算机十分重要 比如笔记本和智能手机\N{\c&H00D8FF&\fs40}which is important for computers that run on batteries, like laptops and smartphones.
Dialogue: 0,0:10:15.70,0:10:19.95,720P-CN,,0,0,0,,为了满足这些需求 许多现代处理器可以增加或降低时钟速度\N{\c&H00D8FF&\fs40}To meet these needs, many modern processors can increase or decrease their clock speed
Comment: 0,0:10:15.70,0:10:19.95,720P-CN,,0,0,0,,为了满足以上需求 许多现代处理器能够根据需要提高或降低时钟频率\N{\c&H00D8FF&\fs40}To meet these needs, many modern processors can increase or decrease their clock speed
Dialogue: 0,0:10:19.95,0:10:23.20,720P-CN,,0,0,0,,基于不同需求 叫做动态频率调整\N{\c&H00D8FF&\fs40}based on demand, which is called dynamic frequency scaling.
Comment: 0,0:10:19.95,0:10:23.20,720P-CN,,0,0,0,,这就是 动态时钟频率调整\N{\c&H00D8FF&\fs40}based on demand, which is called dynamic frequency scaling.
Dialogue: 0,0:10:23.20,0:10:26.20,720P-CN,,0,0,0,,这样 加上了时钟 CPU就完整了\N{\c&H00D8FF&\fs40}So, with the addition of a clock, our CPU is complete.
Comment: 0,0:10:23.20,0:10:26.20,720P-CN,,0,0,0,,有了时钟 我们的CPU就成型了\N{\c&H00D8FF&\fs40}So, with the addition of a clock, our CPU is complete.
Dialogue: 0,0:10:26.20,0:10:28.75,720P-CN,,0,0,0,,现在可以用盒子封起来 构建成组件\N{\c&H00D8FF&\fs40}We can now put a box around it, and make it its own component.
Comment: 0,0:10:26.20,0:10:28.75,720P-CN,,0,0,0,,现在可以把它封装成一个组件\N{\c&H00D8FF&\fs40}We can now put a box around it, and make it its own component.
Dialogue: 0,0:10:28.75,0:10:31.00,720P-CN,,0,0,0,,没错 新的一层抽象\N{\c&H00D8FF&\fs40}Yup. A new level of abstraction!
Dialogue: 0,0:10:37.05,0:10:41.55,720P-CN,,0,0,0,,RAM如上一集展示的 在CPU外独立成为一个组件\N{\c&H00D8FF&\fs40}RAM, as I showed you last episode, lies outside the CPU as its own component,
Comment: 0,0:10:37.05,0:10:41.55,720P-CN,,0,0,0,,上一集的RAM作为组件在CPU外\N{\c&H00D8FF&\fs40}RAM, as I showed you last episode, lies outside the CPU as its own component,
Dialogue: 0,0:10:41.55,0:10:45.45,720P-CN,,0,0,0,,他们互相通过地址 数据和启动线交流 \N{\c&H00D8FF&\fs40}and they communicate with each other using address, data and enable wires.
Comment: 0,0:10:41.55,0:10:45.45,720P-CN,,0,0,0,,彼此通过地址 数据和使能线通信 \N{\c&H00D8FF&\fs40}and they communicate with each other using address, data and enable wires.
Dialogue: 0,0:10:45.45,0:10:48.40,720P-CN,,0,0,0,,虽然我们设计的CPU经过了简化\N{\c&H00D8FF&\fs40}Although the CPU we designed today is a simplified example,
Comment: 0,0:10:45.45,0:10:48.40,720P-CN,,0,0,0,,尽管我们设计的CPU经过了简化\N{\c&H00D8FF&\fs40}Although the CPU we designed today is a simplified example,
Dialogue: 0,0:10:48.40,0:10:52.15,720P-CN,,0,0,0,,许多基本的机制仍保留在现代处理器中\N{\c&H00D8FF&\fs40}many of the basic mechanics we discussed are still found in modern processors.
Comment: 0,0:10:48.40,0:10:52.15,720P-CN,,0,0,0,,但它的许多基本机制仍应用在现代处理器中\N{\c&H00D8FF&\fs40}many of the basic mechanics we discussed are still found in modern processors.
Dialogue: 0,0:10:52.15,0:10:56.90,720P-CN,,0,0,0,,下一集我们会加强CPU 拓展更多的指令\N{\c&H00D8FF&\fs40}Next episode, we're going to beef up our CPU, extending it with more instructions as
Comment: 0,0:10:52.15,0:10:56.90,720P-CN,,0,0,0,,下期我们将通过扩展更多指令增强CPU的功能\N{\c&H00D8FF&\fs40}Next episode, we're going to beef up our CPU, extending it with more instructions as
Dialogue: 0,0:10:56.90,0:10:59.45,720P-CN,,0,0,0,,也将迈入软件大门的第一步\N{\c&H00D8FF&\fs40}we take our first baby steps into software.
Comment: 0,0:10:56.90,0:10:59.45,720P-CN,,0,0,0,,并初涉软件领域\N{\c&H00D8FF&\fs40}we take our first baby steps into software.
Dialogue: 0,0:10:59.45,0:11:01.45,720P-CN,,0,0,0,,下周见\N{\c&H00D8FF&\fs40}I'll see you next week.
Dialogue: 0,0:11:01.45,0:11:03.45,OP-ED,,0,0,0,,{\pos(633.333,305.333)}{\c&H00D8FF&\fs55\pos(960,340)}阿尔法小分队荣誉译制\N{\c&H00D8FF&\fs45}{\c&H43DEAA&\fs45}翻：@ErrorEnvyEnchant 校：@Auriance 压制：@Mihael_Ho \N{\c&H00D8FF&\fs45}{\c&H00D8FF&\fs55}长期招募 详情见微博置顶@阿尔法小分队科教组

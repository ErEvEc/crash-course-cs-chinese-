[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Audio File: Alan Turing- Crash Course Computer Science #15.mp4
Video File: Alan Turing- Crash Course Computer Science #15.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 213
Active Line: 241
Video Position: 17913

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: 720P-CN,Noto Sans S Chinese Bold,55,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,2,2,10,10,20,1
Style: OP-ED,Noto Sans S Chinese Bold,55,&H0000D8FF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: FOOT-NOTE,Noto Sans S Chinese Bold,45,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,2,4,10,10,20,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,OP-ED,,0,0,0,,{\pos(633.333,305.333)}{\c&H00D8FF&\fs55\pos(960,340)}阿尔法小分队荣誉译制\N{\c&H00D8FF&\fs45}{\c&H43DEAA&\fs45}翻：@Auriance 校：@ErrorEnvyEnchant 压制：@Mihael_Ho \N{\c&H00D8FF&\fs45}{\c&H00D8FF&\fs55}长期招募 详情见微博置顶@阿尔法小分队科教组
Dialogue: 0,0:00:03.00,0:00:06.20,720P-CN,,0,0,0,,大家好 我是凯莉·安 欢迎来到计算机科学速成课\N{\c&H00D8FF&\fs40}Hi, I'm Carrie Anne, and welcome to CrashCourse Computer Science!
Dialogue: 0,0:00:00.00,0:00:05.00,FOOT-NOTE,,0,0,0,,{\pos(186,32)}【本期推荐阅读：《图灵的秘密：他的生平、思想及论文解读》】
Dialogue: 0,0:00:06.20,0:00:07.65,720P-CN,,0,0,0,,之前几期\N{\c&H00D8FF&\fs40}Over the past few episodes,
Dialogue: 0,0:00:07.65,0:00:10.50,720P-CN,,0,0,0,,我们主要在理解计算机科学的基础\N{\c&H00D8FF&\fs40}we've been building up our understanding of computer science fundamentals,
Dialogue: 0,0:00:10.50,0:00:13.12,720P-CN,,0,0,0,,比如函数 算法和数据结构\N{\c&H00D8FF&\fs40}such as functions, algorithms and data structures.
Dialogue: 0,0:00:13.12,0:00:15.66,720P-CN,,0,0,0,,今天我们往回看\N{\c&H00D8FF&\fs40}Today, we're going to take a step back and look at the person
Dialogue: 0,0:00:15.66,0:00:19.84,720P-CN,,0,0,0,,认识现代计算理论的奠基人\N{\c&H00D8FF&\fs40}who formulated many of the theoretical concepts that underline modern computation.
Dialogue: 0,0:00:19.84,0:00:24.48,720P-CN,,0,0,0,,计算机科学之父 长得不像本尼迪克特·康伯巴奇的 艾伦·图灵 \N{\c&H00D8FF&\fs40}The father of computer science and not quite Benedict Cumberbatch lookalike Alan Turing.
Dialogue: 0,0:00:19.84,0:00:24.48,FOOT-NOTE,,0,0,0,,{\pos(124,26)}【本尼迪克特·康伯巴奇，即“卷福”，在电影《模仿游戏》中饰演图灵】
Dialogue: 0,0:00:33.42,0:00:36.30,720P-CN,,0,0,0,,艾伦·麦席森·图灵 1912年生于伦敦\N{\c&H00D8FF&\fs40}Alan Mathison Turing was born in London in 1912
Dialogue: 0,0:00:36.30,0:00:40.32,720P-CN,,0,0,0,,早年就在数学和科学方面展现了惊人的天赋\N{\c&H00D8FF&\fs40}and showed an incredible aptitude for maths and science throughout his early education.
Dialogue: 0,0:00:40.32,0:00:44.10,720P-CN,,0,0,0,,他与计算机科学的首次接触在1935年 当时还没有计算机科学的叫法\N{\c&H00D8FF&\fs40}His first brush of what we now call computer science came in 1935
Dialogue: 0,0:00:44.10,0:00:46.90,720P-CN,,0,0,0,,当时还是剑桥大学国王学院的硕士研究生\N{\c&H00D8FF&\fs40}while he was a master's student at King's College in Cambridge.
Dialogue: 0,0:00:46.90,0:00:50.32,720P-CN,,0,0,0,,他决定解决德国数学家大卫·希尔伯特提出的问题\N{\c&H00D8FF&\fs40}He set out to solve a problem posed by German Mathematician David Hilbert
Dialogue: 0,0:00:50.32,0:00:54.40,720P-CN,,0,0,0,,就是可判定性问题\N{\c&H00D8FF&\fs40}known as the Entscheidungsproblem or decision problem, which asked the following:
Dialogue: 0,0:00:54.40,0:00:58.24,720P-CN,,0,0,0,,它提出 是否存在一个算法能够接受以形式逻辑表述的问题\N{\c&H00D8FF&\fs40}is there an algorithm that takes as input a statement written in formal logic,
Dialogue: 0,0:00:58.24,0:01:01.34,720P-CN,,0,0,0,,并总是能正确的回答“是”或“否”\N{\c&H00D8FF&\fs40}and produces a "yes" or "no" answer that's always accurate?
Dialogue: 0,0:01:01.34,0:01:04.44,720P-CN,,0,0,0,,如果存在这样的算法 可以用它来回答问题\N{\c&H00D8FF&\fs40}If such an algorithm existed, we could use it to answer questions like,
Dialogue: 0,0:01:04.44,0:01:06.40,720P-CN,,0,0,0,,比如 “是否存在比所有数字都大的数”\N{\c&H00D8FF&\fs40}"Is there a number bigger than all numbers?"
Dialogue: 0,0:01:06.40,0:01:08.71,720P-CN,,0,0,0,,当然不存在 这个问题我们已经知道答案了\N{\c&H00D8FF&\fs40}No, there's not. We know the answer to that one,
Dialogue: 0,0:01:08.71,0:01:12.10,720P-CN,,0,0,0,,但我们还想知道其他数学问题的答案\N{\c&H00D8FF&\fs40}but there are many other questions in mathematics that we'd like to know the answer to.
Dialogue: 0,0:01:12.10,0:01:15.06,720P-CN,,0,0,0,,所以如果这种算法存在 我们想知道它\N{\c&H00D8FF&\fs40}So if this algorithm existed, we'd want to know it.
Dialogue: 0,0:01:15.06,0:01:17.43,720P-CN,,0,0,0,,美国数学家 阿伦索·丘奇于1935年首先提出了解答\N{\c&H00D8FF&\fs40}The American mathematician Alonzo Church
Dialogue: 0,0:01:17.43,0:01:19.98,720P-CN,,0,0,0,,美国数学家 阿伦索·丘奇于1935年首先提出了解答\N{\c&H00D8FF&\fs40}first presented a solution to this problem in 1935.
Dialogue: 0,0:01:19.98,0:01:23.66,720P-CN,,0,0,0,,他创造了一个数学表达系统 称为 λ演算/λ算子\N{\c&H00D8FF&\fs40}He developed a system of mathematical expressions called Lambda Calculus
Dialogue: 0,0:01:23.66,0:01:26.76,720P-CN,,0,0,0,,并证明了这种通用算法不存在\N{\c&H00D8FF&\fs40}and demonstrated that no such universal algorithm could exist.
Dialogue: 0,0:01:26.76,0:01:30.10,720P-CN,,0,0,0,,尽管λ演算可以表示任意计算\N{\c&H00D8FF&\fs40}Although Lambda Calculus was capable of representing any computation,
Dialogue: 0,0:01:30.10,0:01:33.28,720P-CN,,0,0,0,,其数学技巧既难理解又难应用\N{\c&H00D8FF&\fs40}the mathematical technique was difficult to apply and understand.
Dialogue: 0,0:01:33.28,0:01:36.07,720P-CN,,0,0,0,,大约同时期的大西洋彼岸\N{\c&H00D8FF&\fs40}At pretty much the same time on the other side of the Atlantic,
Dialogue: 0,0:01:36.07,0:01:39.10,720P-CN,,0,0,0,,艾伦·图灵独立研究出了另一种解法\N{\c&H00D8FF&\fs40}Alan Turing came up with his own approach to solve the decision problem.
Dialogue: 0,0:01:39.10,0:01:43.52,720P-CN,,0,0,0,,他提出了一个理想化计算装置 现在称为图灵机\N{\c&H00D8FF&\fs40}He proposed a hypothetical computing machine, which we now call a Turing Machine.
Dialogue: 0,0:01:43.52,0:01:47.82,720P-CN,,0,0,0,,图灵机是一种计算数学模型 简单但功能强大\N{\c&H00D8FF&\fs40}Turing Machines provided a simple, yet powerful mathematical model of computation.
Dialogue: 0,0:01:47.82,0:01:49.96,720P-CN,,0,0,0,,尽管基于完全不同的数学理论\N{\c&H00D8FF&\fs40}Although using totally different mathematics,
Dialogue: 0,0:01:49.96,0:01:54.00,720P-CN,,0,0,0,,图灵机在计算能力上与λ演算是等价的\N{\c&H00D8FF&\fs40}they were functionally equivalent to lambda calculus in terms of their computational power.
Dialogue: 0,0:01:54.00,0:01:56.80,720P-CN,,0,0,0,,因为相对更简单\N{\c&H00D8FF&\fs40}However their relative simplicity made them much more popular
Dialogue: 0,0:01:56.80,0:01:59.00,720P-CN,,0,0,0,,它在新兴的计算机科学领域更流行\N{\c&H00D8FF&\fs40}in the burgeoning field of computer science.
Dialogue: 0,0:01:59.00,0:02:02.12,720P-CN,,0,0,0,,它真的很简单 马上我就讲\N{\c&H00D8FF&\fs40}In fact, they're simple enough that I'm going to explain it right now.
Dialogue: 0,0:02:02.12,0:02:04.93,720P-CN,,0,0,0,,图灵机是一种理想化的计算装置\N{\c&H00D8FF&\fs40}A Turing Machine is a theoretical computing device
Dialogue: 0,0:02:04.93,0:02:08.06,720P-CN,,0,0,0,,使用无限长度的内存纸带存储符号\N{\c&H00D8FF&\fs40}equipped with an infinitely long memory tape which stores symbols
Dialogue: 0,0:02:08.06,0:02:11.06,720P-CN,,0,0,0,,和一个读写头\N{\c&H00D8FF&\fs40}and a device called a read/write head
Dialogue: 0,0:02:11.06,0:02:12.74,720P-CN,,0,0,0,,读写头能读取 写入 或者修改纸带上的符号\N{\c&H00D8FF&\fs40}which can read and write, or modify, symbols on that tape.
Dialogue: 0,0:02:12.74,0:02:15.86,720P-CN,,0,0,0,,还有一个状态变量\N{\c&H00D8FF&\fs40}There's also a state variable in which
Dialogue: 0,0:02:15.86,0:02:17.60,720P-CN,,0,0,0,,它保存机器的当前状态\N{\c&H00D8FF&\fs40}we can hold a piece of information about the current state of the machine.
Dialogue: 0,0:02:17.60,0:02:20.32,720P-CN,,0,0,0,,以及一组规则 说明机器能做什么\N{\c&H00D8FF&\fs40}And a set of rules that describes what the machine does.
Dialogue: 0,0:02:20.32,0:02:23.06,720P-CN,,0,0,0,,当机器状态和当前读取的符号确定时\N{\c&H00D8FF&\fs40}Given a state and the current symbol the head is reading,
Dialogue: 0,0:02:23.06,0:02:26.87,720P-CN,,0,0,0,,机器根据规则可以在纸带上写入新符号 改变机器状态\N{\c&H00D8FF&\fs40}the rule can be to write a symbol on the tape change the state of the machine
Dialogue: 0,0:02:26.87,0:02:29.36,720P-CN,,0,0,0,,将读写头左/右移动一格\N{\c&H00D8FF&\fs40} move the read/write head to the left or right by one spot
Dialogue: 0,0:02:29.36,0:02:31.40,720P-CN,,0,0,0,,或是以上的任意组合\N{\c&H00D8FF&\fs40}or any combination of these actions.
Dialogue: 0,0:02:31.40,0:02:34.24,720P-CN,,0,0,0,,为了便于理解 我们来看个例子\N{\c&H00D8FF&\fs40}To make this concrete let's work through a simple example:
Dialogue: 0,0:02:34.24,0:02:37.59,720P-CN,,0,0,0,,图灵机以字符串形式 读取一个末尾是0的二进制数\N{\c&H00D8FF&\fs40}a Turing Machine that reads a string of ones ending in a zero
Dialogue: 0,0:02:37.59,0:02:40.16,720P-CN,,0,0,0,,然后计算这个二进制数是否包含偶数个"1"\N{\c&H00D8FF&\fs40}and computes whether there is an even number of ones.
Dialogue: 0,0:02:40.16,0:02:44.96,720P-CN,,0,0,0,,如果是 那么机器在纸带上写"1"  否则写"0"\N{\c&H00D8FF&\fs40}If that's true, the machine will write a one to the tape and if it's false, it'll write a zero.
Dialogue: 0,0:02:44.96,0:02:47.40,720P-CN,,0,0,0,,首先需要确定图灵机的规则\N{\c&H00D8FF&\fs40}First we need to define our Turing machine rules.
Dialogue: 0,0:02:47.40,0:02:50.60,720P-CN,,0,0,0,,如果状态为偶 且 纸带的当前符号为1\N{\c&H00D8FF&\fs40}If the state is even and the current symbol of the tape is one,
Dialogue: 0,0:02:50.60,0:02:54.32,720P-CN,,0,0,0,,我们就更新图灵机的状态为奇 右移读写头\N{\c&H00D8FF&\fs40}then we update the machine state to odd and move the head to the right.
Dialogue: 0,0:02:54.32,0:02:57.78,720P-CN,,0,0,0,,反之 如果状态为偶 且 当前符号为0\N{\c&H00D8FF&\fs40}On the other hand if the state is even and the current symbol is zero,
Dialogue: 0,0:02:57.78,0:02:59.82,720P-CN,,0,0,0,,这说明已经到了字符串的末尾\N{\c&H00D8FF&\fs40}which means we've reached the end of the string of ones,
Dialogue: 0,0:02:59.82,0:03:02.62,720P-CN,,0,0,0,,我们在纸带上写1 并将 图灵机状态写为停止\N{\c&H00D8FF&\fs40}then we write one to the tape and change the state to halt,
Dialogue: 0,0:03:02.62,0:03:06.16,720P-CN,,0,0,0,,这样图灵机就完成了计算\N{\c&H00D8FF&\fs40}as in we're finished and the Turing machine has completed the computation.
Dialogue: 0,0:03:06.16,0:03:09.10,720P-CN,,0,0,0,,我们还需要奇状态下的图灵机规则\N{\c&H00D8FF&\fs40}We also need rules for when the Turing machine is in an odd state,
Dialogue: 0,0:03:09.10,0:03:13.04,720P-CN,,0,0,0,,一个对应纸带上符号为0 另一个对应符号为1\N{\c&H00D8FF&\fs40}one rule for the symbol on the tape is a zero and another for when it is one.
Dialogue: 0,0:03:13.04,0:03:16.58,720P-CN,,0,0,0,,最后还需要定义一个起始状态 我们会设为偶状态\N{\c&H00D8FF&\fs40}Lastly we need to define a starting state, which we'll set to be even.
Dialogue: 0,0:03:16.58,0:03:19.47,720P-CN,,0,0,0,,这样就完成了图灵机起始状态的所有规则\N{\c&H00D8FF&\fs40}Now we've defined the rules in the starting state of our Turing machine,
Dialogue: 0,0:03:19.47,0:03:23.36,720P-CN,,0,0,0,,这和计算机程序很类似 我们用测试输入来运行一下\N{\c&H00D8FF&\fs40}which is comparable to a computer program, we can run it on some example input.
Dialogue: 0,0:03:23.36,0:03:25.68,720P-CN,,0,0,0,,假设我们在纸带上存储了 1 1 0\N{\c&H00D8FF&\fs40}Let's say we store 1 1 0 onto tape.
Dialogue: 0,0:03:25.68,0:03:28.54,720P-CN,,0,0,0,,2个1意味着有偶数个1\N{\c&H00D8FF&\fs40}That's two ones which means there is an even number of ones,
Dialogue: 0,0:03:28.54,0:03:31.90,720P-CN,,0,0,0,,如果还不熟悉这个概念 我们也许应该学一下数学速成课\N{\c&H00D8FF&\fs40}and if that's news to you, we should probably get working on crash course Math.
Dialogue: 0,0:03:31.90,0:03:34.69,720P-CN,,0,0,0,,目前所有的规则只是让读写头右移\N{\c&H00D8FF&\fs40}Notice that our rules only ever move their head to the right
Dialogue: 0,0:03:34.69,0:03:36.32,720P-CN,,0,0,0,,所以不涉及(读写头)左侧的纸带\N{\c&H00D8FF&\fs40} so the rest of the tape is irrelevant.
Dialogue: 0,0:03:36.32,0:03:38.08,720P-CN,,0,0,0,,为了简化 我们假设这部分的值都为空\N{\c&H00D8FF&\fs40}We'll leave it blank for simplicity.
Dialogue: 0,0:03:38.08,0:03:40.80,720P-CN,,0,0,0,,图灵机可以运行了 我们来运行吧\N{\c&H00D8FF&\fs40}Our Turing machine is all ready to go so let's start it.
Dialogue: 0,0:03:40.80,0:03:43.54,720P-CN,,0,0,0,,状态是偶 并且 第一个数是1\N{\c&H00D8FF&\fs40}Our state is even and the first number we see is a one.
Dialogue: 0,0:03:43.54,0:03:46.78,720P-CN,,0,0,0,,匹配第一条规则 于是我们开始执行\N{\c&H00D8FF&\fs40}That matches our topmost rule and so we execute the effect,
Dialogue: 0,0:03:46.78,0:03:50.62,720P-CN,,0,0,0,,将状态改为奇 同时 将读写头右移一个单位\N{\c&H00D8FF&\fs40}which is to update the state to odd and move the read/write head to the right by one spot.
Dialogue: 0,0:03:50.62,0:03:54.46,720P-CN,,0,0,0,,好了 现在我们看到了纸带上的另一个1 但现在状态为奇\N{\c&H00D8FF&\fs40}Okay, now we see another one on the tape, but this time our state is odd
Dialogue: 0,0:03:54.46,0:03:56.63,720P-CN,,0,0,0,,所于是执行第三条规则\N{\c&H00D8FF&\fs40}and so we execute our third rule
Dialogue: 0,0:03:56.63,0:03:59.54,720P-CN,,0,0,0,,将状态又改回偶 再右移读写头\N{\c&H00D8FF&\fs40}which sets the state back to even and moves the head to the right.
Dialogue: 0,0:03:59.54,0:04:03.59,720P-CN,,0,0,0,,现在读到了0 并且当前状态为偶 所以我们执行第二条规则\N{\c&H00D8FF&\fs40}Now we see a 0 and our current state is even so we execute our second rule
Dialogue: 0,0:04:03.59,0:04:07.10,720P-CN,,0,0,0,,向纸带上写1 表示真\N{\c&H00D8FF&\fs40}which is to write a 1 to the tape signifying that yes, it's true,
Dialogue: 0,0:04:07.10,0:04:10.78,720P-CN,,0,0,0,,字符串中有偶数个1 机器停止运行\N{\c&H00D8FF&\fs40}there is an even number of ones, and finally the machine halts.
Dialogue: 0,0:04:10.78,0:04:13.52,720P-CN,,0,0,0,,这就是图灵机的原理。很简单对吧\N{\c&H00D8FF&\fs40}That's how Turing machines work. Pretty simple right?
Dialogue: 0,0:04:13.52,0:04:15.64,720P-CN,,0,0,0,,你可能会想知道为什么它这么重要\N{\c&H00D8FF&\fs40}so you might be wondering why they're such a big deal.
Dialogue: 0,0:04:15.64,0:04:19.90,720P-CN,,0,0,0,,图灵证明了图灵机可以执行任意运算\N{\c&H00D8FF&\fs40}Well Turing shows that this simple hypothetical machine can perform any computation
Dialogue: 0,0:04:19.90,0:04:21.76,720P-CN,,0,0,0,,只要有足够的时间和存储空间\N{\c&H00D8FF&\fs40}if given enough time and memory
Dialogue: 0,0:04:21.76,0:04:23.64,720P-CN,,0,0,0,,图灵机是一个通用计算机\N{\c&H00D8FF&\fs40}It's a general-purpose computer.
Dialogue: 0,0:04:23.64,0:04:25.41,720P-CN,,0,0,0,,刚才的例子很简单\N{\c&H00D8FF&\fs40}Our program was a simple example,
Dialogue: 0,0:04:25.41,0:04:28.88,720P-CN,,0,0,0,,但只要状态和纸带足够多 你可以构建任何东西\N{\c&H00D8FF&\fs40}but with enough Rules states and tape you could build anything-
Dialogue: 0,0:04:28.88,0:04:31.00,720P-CN,,0,0,0,,浏览器 魔兽世界 随便什么\N{\c&H00D8FF&\fs40}a web browser, world of warcraft - whatever!
Dialogue: 0,0:04:31.00,0:04:34.83,720P-CN,,0,0,0,,当然它效率低的可怕 但理论上确实可行\N{\c&H00D8FF&\fs40}Of course it would be ridiculously inefficient, but it is theoretically possible.
Dialogue: 0,0:04:34.83,0:04:38.42,720P-CN,,0,0,0,,所以作为计算模型 图灵机的理念如此重要\N{\c&H00D8FF&\fs40}And that's why, as a model of computing, it's such a powerful idea.
Dialogue: 0,0:04:38.42,0:04:41.05,720P-CN,,0,0,0,,实际上 仅考虑计算的适用领域\N{\c&H00D8FF&\fs40}In fact in terms of what it can and cannot compute
Dialogue: 0,0:04:41.05,0:04:43.24,720P-CN,,0,0,0,,图灵机是最强大的计算机\N{\c&H00D8FF&\fs40}there's no computer more powerful than a Turing machine.
Dialogue: 0,0:04:43.24,0:04:46.47,720P-CN,,0,0,0,,具备这样能力的计算机 我们称它为图灵完备的\N{\c&H00D8FF&\fs40}A computer that is as powerful is called Turing complete.
Dialogue: 0,0:04:46.47,0:04:49.51,720P-CN,,0,0,0,,任何现代计算系统 笔记本 智能手机\N{\c&H00D8FF&\fs40}Every modern computing system your laptop your smartphone
Dialogue: 0,0:04:49.51,0:04:53.96,720P-CN,,0,0,0,,甚至微波炉和温度计里的微电脑都是图灵完备的\N{\c&H00D8FF&\fs40}and even the little computer inside your microwave and thermostat are all Turing Complete.
Dialogue: 0,0:04:53.96,0:04:55.77,720P-CN,,0,0,0,,为了解答希尔伯特的可判定性问题\N{\c&H00D8FF&\fs40}To answer Hilbert's decision problem,
Dialogue: 0,0:04:55.77,0:04:59.46,720P-CN,,0,0,0,,图灵在一个有趣的计算难题中引入了图灵机\N{\c&H00D8FF&\fs40}Turing applied these new Turing machines to an intriguing computational puzzle:
Dialogue: 0,0:04:59.46,0:05:00.74,720P-CN,,0,0,0,,即 停机问题\N{\c&H00D8FF&\fs40} the halting problem.
Dialogue: 0,0:05:00.74,0:05:04.53,720P-CN,,0,0,0,,简单说就是 是否存在一种算法\N{\c&H00D8FF&\fs40}Put simply this asks "Is there an algorithm that can determine,
Dialogue: 0,0:05:04.53,0:05:07.46,720P-CN,,0,0,0,,在给定一台图灵机和纸带输入的情况下\N{\c&H00D8FF&\fs40}given a description of a Turing machine and the input from its tape,
Dialogue: 0,0:05:07.46,0:05:09.74,720P-CN,,0,0,0,,能够判定这台机器会最终停止运行\N{\c&H00D8FF&\fs40}whether the Machine will run forever or halt?"
Dialogue: 0,0:05:09.74,0:05:13.54,720P-CN,,0,0,0,,举个例子 我们知道当输入{\u1}1 1 0{\u0}时 图灵机会停止\N{\c&H00D8FF&\fs40}For example we know our Turing machine will halt when given the input 1 1 0,
Dialogue: 0,0:05:13.54,0:05:16.58,720P-CN,,0,0,0,,因为我们一步步执行程序 直到机器停止\N{\c&H00D8FF&\fs40}because we literally walk through the example until it halted,
Dialogue: 0,0:05:16.58,0:05:18.46,720P-CN,,0,0,0,,但对更复杂的问题呢\N{\c&H00D8FF&\fs40}but what about a more complex problem?
Dialogue: 0,0:05:18.46,0:05:21.92,720P-CN,,0,0,0,,有办法不运行也能知道结果吗\N{\c&H00D8FF&\fs40}Is there a way to figure out if the program will halt without executing it?
Dialogue: 0,0:05:21.92,0:05:26.05,720P-CN,,0,0,0,,有些程序可能会运行数年之久 如果能提前知道结果会很有用\N{\c&H00D8FF&\fs40}Some programs might take years to run so it would be useful to know before we run it
Dialogue: 0,0:05:26.05,0:05:31.72,720P-CN,,0,0,0,,而不是运行之后苦苦等待结果\N{\c&H00D8FF&\fs40}and wait and wait and wait and then start getting worried and wonder
Dialogue: 0,0:05:31.72,0:05:34.02,720P-CN,,0,0,0,,直到几十年过去 两鬓斑白 再悲伤的重启程序\N{\c&H00D8FF&\fs40}and then decades later when you're old and gray control-alt-delete so much sadness.
Dialogue: 0,0:05:34.02,0:05:36.19,720P-CN,,0,0,0,,但很遗憾\N{\c&H00D8FF&\fs40}Unfortunately Turing came up with a proof that shows
Dialogue: 0,0:05:36.19,0:05:38.35,720P-CN,,0,0,0,,图灵证明了停机问题不可解\N{\c&H00D8FF&\fs40}the halting problem was in fact unsolvable,
Dialogue: 0,0:05:38.35,0:05:40.46,720P-CN,,0,0,0,,证明用了一个巧妙的逻辑悖论\N{\c&H00D8FF&\fs40}through a clever logical contradiction.
Dialogue: 0,0:05:40.46,0:05:41.74,720P-CN,,0,0,0,,我们一起看看证明过程\N{\c&H00D8FF&\fs40}Let's Follow his reasoning.
Dialogue: 0,0:05:41.74,0:05:43.73,720P-CN,,0,0,0,,假设我们有一台图灵机\N{\c&H00D8FF&\fs40}Imagine we have a hypothetical Turing machine
Dialogue: 0,0:05:43.73,0:05:47.04,720P-CN,,0,0,0,,已经加载了一个程序和纸带输入\N{\c&H00D8FF&\fs40}that takes a description of a program and some input for his tape
Dialogue: 0,0:05:47.04,0:05:50.38,720P-CN,,0,0,0,,它要么输出Yes后停机，要么输出no继续运行\N{\c&H00D8FF&\fs40}and always outputs either Yes, it halts or no, it doesn't
Dialogue: 0,0:05:50.38,0:05:53.54,720P-CN,,0,0,0,,我给它取个名字Holtz 简称H\N{\c&H00D8FF&\fs40}and I'm going to give this machine a fun name H for Holtz.
Dialogue: 0,0:05:53.54,0:05:54.75,720P-CN,,0,0,0,,不用考虑它的原理\N{\c&H00D8FF&\fs40}Don't worry about how it works.
Dialogue: 0,0:05:54.75,0:05:57.84,720P-CN,,0,0,0,,就假设存在这样的机器 只考虑理论\N{\c&H00D8FF&\fs40}Let's just assume such a machine exists We're talking theory here.
Dialogue: 0,0:05:57.84,0:06:02.34,720P-CN,,0,0,0,,图灵分析说 如果存在一个程序 H无法计算它的停机状态\N{\c&H00D8FF&\fs40}Turing reasoned if there existed a program whose halting behavior was not decidable by H
Dialogue: 0,0:06:02.34,0:06:04.54,720P-CN,,0,0,0,,这就意味着停机问题无解\N{\c&H00D8FF&\fs40} it would mean the halting problem is unsolvable
Dialogue: 0,0:06:04.54,0:06:08.26,720P-CN,,0,0,0,,为了求解 图灵设计了另一个以H为基础的图灵机\N{\c&H00D8FF&\fs40}To find one Turing designed another Turing machine that built on top of H.
Dialogue: 0,0:06:08.26,0:06:12.54,720P-CN,,0,0,0,,如果H说程序停止 那么新机器会一直运行\N{\c&H00D8FF&\fs40}If H says the program holds, then we'll make our new machine loop forever.
Dialogue: 0,0:06:12.54,0:06:17.06,720P-CN,,0,0,0,,否则 新机器停止并输出no\N{\c&H00D8FF&\fs40}If the answer is no, it doesn't halt, we'll have the new machine output a no and halt.
Dialogue: 0,0:06:17.06,0:06:20.44,720P-CN,,0,0,0,,简单说就是 新机器与H的行为相反\N{\c&H00D8FF&\fs40}In essence we're building a machine that does the opposite of what H says:
Dialogue: 0,0:06:20.44,0:06:23.98,720P-CN,,0,0,0,,如果程序一直运行 那么新机器停止 反之则新机器一直运行\N{\c&H00D8FF&\fs40}halt if the program doesn't halt and run forever if the program halts.
Dialogue: 0,0:06:23.98,0:06:27.49,720P-CN,,0,0,0,,我们还需要在新机器上增加一个分离器\N{\c&H00D8FF&\fs40}For this argument we'll also need to add a splitter to the front of our new machine
Dialogue: 0,0:06:27.49,0:06:32.72,720P-CN,,0,0,0,,这样机器只有一个输入 再将输入作为H的程序和输入\N{\c&H00D8FF&\fs40}so that it accepts only one input and passes that as both the program and input into H.
Dialogue: 0,0:06:32.72,0:06:34.78,720P-CN,,0,0,0,,给新机器取个名字 叫Bizarro\N{\c&H00D8FF&\fs40}Let's call this new machine "Bizzaro".
Dialogue: 0,0:06:34.78,0:06:37.08,720P-CN,,0,0,0,,目前为止一切还说得过去 是吗\N{\c&H00D8FF&\fs40}So far this seems like a plausible machine, right?
Dialogue: 0,0:06:37.08,0:06:40.06,720P-CN,,0,0,0,,马上要变复杂了 再等等\N{\c&H00D8FF&\fs40}Now it's going to get pretty complicated. But bear with me for a second.
Dialogue: 0,0:06:40.06,0:06:43.96,720P-CN,,0,0,0,,看看把Bizzaro自身的输出当作它的输入后会发生什么\N{\c&H00D8FF&\fs40}Look what happens when you pass Bizzaro a description of itself as the input.
Dialogue: 0,0:06:43.96,0:06:47.86,720P-CN,,0,0,0,,这相当于问H Bizzaro会怎么样\N{\c&H00D8FF&\fs40}This means we're asking H what Bizzaro will do when asked to evaluate itself.
Dialogue: 0,0:06:47.86,0:06:53.00,720P-CN,,0,0,0,,但如果H说Bizzaro停机 随后Bizzaro就开始无限循环\N{\c&H00D8FF&\fs40}But if H says Bizzaro halts then Bizzaro enters its infinite loop and thus doesn't halt.
Dialogue: 0,0:06:53.00,0:06:57.64,720P-CN,,0,0,0,,如果H说Bizzaro不会停机 随后Bizzaro输出no并且停机\N{\c&H00D8FF&\fs40}And if H says Bizarro doesn't halt then Bizzaro outputs a no and halts.
Dialogue: 0,0:06:57.64,0:07:01.76,720P-CN,,0,0,0,,所以H不能解决停机问题因为这个问题无解\N{\c&H00D8FF&\fs40}So H can't possibly decide the halting problem correctly because there is no answer.
Dialogue: 0,0:07:01.76,0:07:04.94,720P-CN,,0,0,0,,这是一个悖论\N{\c&H00D8FF&\fs40}It's a paradox  and this paradox means that
Dialogue: 0,0:07:04.94,0:07:07.06,720P-CN,,0,0,0,,意味折图灵机无法解决停机问题\N{\c&H00D8FF&\fs40}the halting problem cannot be solved with Turing machines.
Dialogue: 0,0:07:07.06,0:07:10.92,720P-CN,,0,0,0,,记住图灵证明了图灵机可以完成任意运算\N{\c&H00D8FF&\fs40}Remember Turing proved that Turing machines could implement any computation
Dialogue: 0,0:07:10.92,0:07:13.41,720P-CN,,0,0,0,,所以停机问题的结果证明了\N{\c&H00D8FF&\fs40}so this solution to the halting problem proves
Dialogue: 0,0:07:13.41,0:07:15.80,720P-CN,,0,0,0,,计算无法解决所有问题\N{\c&H00D8FF&\fs40}that not all problems can be solved by computation.
Dialogue: 0,0:07:15.80,0:07:19.32,720P-CN,,0,0,0,,哈哈 太难了 我自己可能要再看一遍\N{\c&H00D8FF&\fs40}Wow, that's some heavy stuff I might have to watch that again myself.
Dialogue: 0,0:07:19.32,0:07:23.70,720P-CN,,0,0,0,,简而言之 丘奇和图灵证明了计算机能力的局限\N{\c&H00D8FF&\fs40}Long story short Church and Turing showed there were limits to the ability of computers
Dialogue: 0,0:07:23.70,0:07:26.13,720P-CN,,0,0,0,,不论时间再多 存储空间再大\N{\c&H00D8FF&\fs40}no matter how much time or memory you have
Dialogue: 0,0:07:26.13,0:07:28.34,720P-CN,,0,0,0,,总是有无法解决的问题\N{\c&H00D8FF&\fs40}there are just some problems that cannot be solved ever.
Dialogue: 0,0:07:28.34,0:07:31.76,720P-CN,,0,0,0,,丘奇和图灵共同努力确定了计算的局限\N{\c&H00D8FF&\fs40}The concurrent efforts by Church and Turing to determine the limits of computation,
Dialogue: 0,0:07:31.76,0:07:36.50,720P-CN,,0,0,0,,并且基本上形式化证明了可计算性 现在被称为丘奇-图灵论题\N{\c&H00D8FF&\fs40}and in general, formalize computability, are now called the Church-Turing Thesis.
Dialogue: 0,0:07:36.50,0:07:42.22,720P-CN,,0,0,0,,这时（1936年）图灵只有24岁，他的事业才刚刚开始 \N{\c&H00D8FF&\fs40}At this point in 1936 Turing was only 24 years old and really only just beginning his career.
Dialogue: 0,0:07:42.22,0:07:47.36,720P-CN,,0,0,0,,1936年到1938年 他在普林斯顿读完了博士 导师是丘奇\N{\c&H00D8FF&\fs40}From 1936 through 1938 he completed a PhD at Princeton University
Dialogue: 0,0:07:47.36,0:07:51.14,720P-CN,,0,0,0,,毕业后图灵回到了剑桥\N{\c&H00D8FF&\fs40}under the guidance of Church then after graduating he returned to Cambridge.
Dialogue: 0,0:07:51.14,0:07:54.99,720P-CN,,0,0,0,,1939年刚果 英国被卷入了二战\N{\c&H00D8FF&\fs40}Shortly after in 1939 Britain became embroiled in World War II,
Dialogue: 0,0:07:54.99,0:07:57.40,720P-CN,,0,0,0,,图灵开始为战争出谋划策\N{\c&H00D8FF&\fs40}Turing's genius was quickly applied to the war effort.
Dialogue: 0,0:07:57.40,0:07:59.87,720P-CN,,0,0,0,,实际上 战争开始前一年\N{\c&H00D8FF&\fs40}In fact a year before the war started
Dialogue: 0,0:07:59.87,0:08:02.82,720P-CN,,0,0,0,,他就已经在英国政府密码学校兼职了\N{\c&H00D8FF&\fs40}he was already working part-time at the UK's government Code and Cypher school
Dialogue: 0,0:08:02.82,0:08:05.86,720P-CN,,0,0,0,,这个学校就是布莱切利园附近的一个密码破译组织\N{\c&H00D8FF&\fs40}which was the British code breaking group based out of Bletchley Park.
Dialogue: 0,0:08:05.86,0:08:09.42,720P-CN,,0,0,0,,图灵的一项主要工作是破译德军的通讯\N{\c&H00D8FF&\fs40}One of his main efforts was figuring out how to decrypt German communications
Dialogue: 0,0:08:09.42,0:08:12.04,720P-CN,,0,0,0,,尤其是使用enigma机器的通讯\N{\c&H00D8FF&\fs40}especially those that use the enigma machine.
Dialogue: 0,0:08:12.04,0:08:14.38,720P-CN,,0,0,0,,简单说这些机器的作用就是打乱文字\N{\c&H00D8FF&\fs40}In short these machines scrambled text.
Dialogue: 0,0:08:14.38,0:08:18.98,720P-CN,,0,0,0,,比如你输入字母 H-E-L-L-O 而输出结果是XWDBJ\N{\c&H00D8FF&\fs40}Like you'd type the letters H-E-L-L-O and the letters XWDBJ would come out.
Dialogue: 0,0:08:18.98,0:08:20.90,720P-CN,,0,0,0,,这个过程称为加密\N{\c&H00D8FF&\fs40}This process is called encryption.
Dialogue: 0,0:08:20.90,0:08:22.23,720P-CN,,0,0,0,,加密过程不是随机的\N{\c&H00D8FF&\fs40}The scrambling wasn't random.
Dialogue: 0,0:08:22.23,0:08:26.61,720P-CN,,0,0,0,,规则由enigma顶部一系列可重排的转子确定\N{\c&H00D8FF&\fs40}The behavior was defined by a series of re-orderable rotors on the top
Dialogue: 0,0:08:26.61,0:08:29.42,720P-CN,,0,0,0,,每个转子有26个旋转位置\N{\c&H00D8FF&\fs40}of the enigma machine, each with 26 possible rotational positions.
Dialogue: 0,0:08:29.42,0:08:31.94,720P-CN,,0,0,0,,机器正面还有一个插板\N{\c&H00D8FF&\fs40}There was also a plug board at the front of the machine
Dialogue: 0,0:08:31.94,0:08:33.84,720P-CN,,0,0,0,,能够完成两两字母交换\N{\c&H00D8FF&\fs40}that allowed pairs of letters to be swapped.
Dialogue: 0,0:08:33.84,0:08:36.60,720P-CN,,0,0,0,,总计有数十亿种设置\N{\c&H00D8FF&\fs40}In total there were billions of possible settings.
Dialogue: 0,0:08:36.60,0:08:40.66,720P-CN,,0,0,0,,如果你有一个enigma机，并且知道正确的转子和面板设置\N{\c&H00D8FF&\fs40}If you had your own enigma machine and you knew the correct rotor and plug board settings
Dialogue: 0,0:08:40.66,0:08:44.38,720P-CN,,0,0,0,,输入XWDBJ 你就可以得到"hello"\N{\c&H00D8FF&\fs40}you could type in XWDBJ and hello would come out.
Dialogue: 0,0:08:44.38,0:08:46.74,720P-CN,,0,0,0,,换句话说 你就破译了这条信息\N{\c&H00D8FF&\fs40}In other words, you decrypted the message.
Dialogue: 0,0:08:46.74,0:08:50.38,720P-CN,,0,0,0,,德军当然不会在公共网络上分享自己的enigma设置\N{\c&H00D8FF&\fs40}Of course the German military wasn't sharing their enigma settings on Social Media
Dialogue: 0,0:08:50.38,0:08:52.20,720P-CN,,0,0,0,,所以盟军必须破解这些密码\N{\c&H00D8FF&\fs40}so the allies had to break the code.
Dialogue: 0,0:08:52.20,0:08:54.38,720P-CN,,0,0,0,,考虑到转子和插板的组合之多\N{\c&H00D8FF&\fs40}With billions of Rotor and plug board combinations
Dialogue: 0,0:08:54.38,0:08:56.38,720P-CN,,0,0,0,,手工破译是不可能的\N{\c&H00D8FF&\fs40}there was no way to check them all by hand.
Dialogue: 0,0:08:56.38,0:08:57.64,720P-CN,,0,0,0,,图灵运气比较好\N{\c&H00D8FF&\fs40}Fortunately for Turing,
Dialogue: 0,0:08:57.64,0:09:00.56,720P-CN,,0,0,0,,enigma机及其使用者并非十全十美\N{\c&H00D8FF&\fs40}Enigma machines and the people who operated them were not perfect,
Dialogue: 0,0:09:00.56,0:09:04.18,720P-CN,,0,0,0,,比如一个字母编码后一定会改变\N{\c&H00D8FF&\fs40}like one key flaw was that a letter would never be encoded as itself
Dialogue: 0,0:09:04.18,0:09:06.88,720P-CN,,0,0,0,,所以h加密后绝对不会还是h\N{\c&H00D8FF&\fs40}as in an h was never encrypted as an h.
Dialogue: 0,0:09:06.88,0:09:12.78,720P-CN,,0,0,0,,图灵利用了这个缺陷 在波兰译码人员的工作基础上\N{\c&H00D8FF&\fs40}Turing, building on earlier work by Polish code breakers,  designed a special-Purpose
Dialogue: 0,0:09:12.78,0:09:14.78,720P-CN,,0,0,0,,设计了专用的机电式计算机 就是"炸弹机"\N{\c&H00D8FF&\fs40} electro-mechanical computer called the Bombe that took advantage of this flaw.
Dialogue: 0,0:09:14.78,0:09:19.28,720P-CN,,0,0,0,,给定一条加密后的消息 炸弹机会尝试各种加密组合\N{\c&H00D8FF&\fs40}It tried lots and lots of combinations of enigma settings for a given encrypted message
Dialogue: 0,0:09:19.28,0:09:23.04,720P-CN,,0,0,0,,如果它找到一种设置 其解密后的字母没有改变\N{\c&H00D8FF&\fs40}If the Bombe found a setting that led to a letter being encoded as itself
Dialogue: 0,0:09:23.04,0:09:26.92,720P-CN,,0,0,0,,我们知道真正的enigma机肯定不会这样 所以这个组合不成立\N{\c&H00D8FF&\fs40}which we know the real Enigma machine couldn't do, that combination was discarded
Dialogue: 0,0:09:26.92,0:09:29.36,720P-CN,,0,0,0,,然后机器继续计算下一个\N{\c&H00D8FF&\fs40}then the machine moved on to try another combination.
Dialogue: 0,0:09:29.36,0:09:32.84,720P-CN,,0,0,0,,于是炸弹机用于大幅缩减enigma机器设置的范围\N{\c&H00D8FF&\fs40}So Bombes were used to greatly narrow the number of Possible enigma settings.
Dialogue: 0,0:09:32.84,0:09:36.76,720P-CN,,0,0,0,,这样译码员只需要破译可能性最大的组合\N{\c&H00D8FF&\fs40}This allowed human code breakers to hone their efforts on the most probable solutions
Dialogue: 0,0:09:36.76,0:09:40.18,720P-CN,,0,0,0,,在解码后的信息中寻找常见的德语单词\N{\c&H00D8FF&\fs40}looking for things like common german words in fragments of decoded text.
Dialogue: 0,0:09:40.18,0:09:43.64,720P-CN,,0,0,0,,为避免密码被破译\N{\c&H00D8FF&\fs40}Periodically the Germans would suspect someone was decoding their communications
Dialogue: 0,0:09:43.64,0:09:45.44,720P-CN,,0,0,0,,德军会定期升级enigma机器\N{\c&H00D8FF&\fs40}and upgrade the enigma machine
Dialogue: 0,0:09:45.44,0:09:48.56,720P-CN,,0,0,0,,比如会增加一个转子 这样会新增更多组合 \N{\c&H00D8FF&\fs40} like they'd add another rotor creating many more combinations
Dialogue: 0,0:09:48.56,0:09:51.14,720P-CN,,0,0,0,,甚至还会重新制造新的加密设备\N{\c&H00D8FF&\fs40}they even built entirely new encryption machines.
Dialogue: 0,0:09:51.14,0:09:53.78,720P-CN,,0,0,0,,整个战争期间 图灵和他布莱切利园的同事们\N{\c&H00D8FF&\fs40}Throughout the war Turing and his colleagues at Bletchley Park
Dialogue: 0,0:09:53.78,0:09:56.02,720P-CN,,0,0,0,,不知不倦的破译密码\N{\c&H00D8FF&\fs40}worked tirelessly to defeat these mechanisms
Dialogue: 0,0:09:56.02,0:09:59.45,720P-CN,,0,0,0,,总的来说 破译德军通讯获得的情报\N{\c&H00D8FF&\fs40}and overall the intelligence gained from decrypted German communications
Dialogue: 0,0:09:59.45,0:10:01.86,720P-CN,,0,0,0,,让盟军在许多情形下占得先机\N{\c&H00D8FF&\fs40}gave the allies an edge in many theatres
Dialogue: 0,0:10:01.86,0:10:05.10,720P-CN,,0,0,0,,甚至有历史学家说这些情报让战争提早了多年结束\N{\c&H00D8FF&\fs40}with some historians arguing it shortened the war by years.
Dialogue: 0,0:10:05.10,0:10:07.41,720P-CN,,0,0,0,,战后 图灵回到了学界\N{\c&H00D8FF&\fs40}After the war Turing returned to Academia
Dialogue: 0,0:10:07.41,0:10:11.82,720P-CN,,0,0,0,,参与了多个早期的电子计算机工作 比如曼彻斯特一号\N{\c&H00D8FF&\fs40}and contributed to many early electronic computing efforts like the Manchester Mark 1
Dialogue: 0,0:10:11.82,0:10:14.70,720P-CN,,0,0,0,,它是程序存储计算机的先驱 影响深远\N{\c&H00D8FF&\fs40}which was an early and influential stored-Program computer.
Dialogue: 0,0:10:14.70,0:10:18.05,720P-CN,,0,0,0,,但他在战后最著名的贡献在人工智能领域\N{\c&H00D8FF&\fs40}But his most famous post-war contribution was to artificial intelligence,
Dialogue: 0,0:10:18.05,0:10:21.70,720P-CN,,0,0,0,,这个领域太超前了 直到1956年才得名\N{\c&H00D8FF&\fs40}a field so new that it didn't even get that name until 1956.
Dialogue: 0,0:10:21.70,0:10:24.78,720P-CN,,0,0,0,,它的内容太多了 以后再说\N{\c&H00D8FF&\fs40}It's a huge topic so we'll get to it again in future episodes.
Dialogue: 0,0:10:24.78,0:10:28.98,720P-CN,,0,0,0,,1950年 图灵想象到了未来某一天、\N{\c&H00D8FF&\fs40}In 1950 Turing could envision a future where computers were powerful enough
Dialogue: 0,0:10:28.98,0:10:33.76,720P-CN,,0,0,0,,计算机功能极强 已经和人类的水平相当 或者至少无法区分计算机或人类\N{\c&H00D8FF&\fs40}to exhibit intelligence equivalent to or at least indistinguishable from that of a human.
Dialogue: 0,0:10:33.76,0:10:37.61,720P-CN,,0,0,0,,图灵提出当计算机可以让人类相信它并非机器的时候\N{\c&H00D8FF&\fs40}Turing postulated that a computer would deserve to be called intelligent
Dialogue: 0,0:10:37.61,0:10:40.40,720P-CN,,0,0,0,,计算机就拥有了智能\N{\c&H00D8FF&\fs40}if it could deceive a human into believing that it was human.
Dialogue: 0,0:10:40.40,0:10:43.84,720P-CN,,0,0,0,,这个假设成为了现在图灵测试的基础\N{\c&H00D8FF&\fs40}This became the basis of a simple test now called the Turing Test.
Dialogue: 0,0:10:43.84,0:10:46.41,720P-CN,,0,0,0,,想象你正和2个人在聊天\N{\c&H00D8FF&\fs40}Imagine that you are having a conversation with two different people
Dialogue: 0,0:10:46.41,0:10:49.94,720P-CN,,0,0,0,,不是面对面或通过语音 而是互相发送文字\N{\c&H00D8FF&\fs40}not by voice or in person but by sending typed notes back and forth.
Dialogue: 0,0:10:49.94,0:10:52.79,720P-CN,,0,0,0,,你可以问任何问题并得到回答\N{\c&H00D8FF&\fs40}You can ask any questions you want and you get replies.
Dialogue: 0,0:10:52.79,0:10:55.80,720P-CN,,0,0,0,,但是这2人中的1个其实是计算机\N{\c&H00D8FF&\fs40}But one of those two people is actually a computer.
Dialogue: 0,0:10:55.80,0:10:58.67,720P-CN,,0,0,0,,如果你不能确定哪个是人哪个是计算机\N{\c&H00D8FF&\fs40} If you can't tell which one is human and which one is a computer
Dialogue: 0,0:10:58.67,0:11:00.38,720P-CN,,0,0,0,,那么计算机就通过了测试\N{\c&H00D8FF&\fs40}then the computer passes the test
Dialogue: 0,0:11:00.38,0:11:04.39,720P-CN,,0,0,0,,有一个更现代版的测试 \N{\c&H00D8FF&\fs40}There's a modern version of this test called a Completely Automated Public Turing Test
Dialogue: 0,0:11:00.38,0:11:07.58,FOOT-NOTE,,0,0,0,,{\pos(456,36)}CAPTCHA 俗称"验证码"
Dialogue: 0,0:11:04.39,0:11:07.58,720P-CN,,0,0,0,,称为"全自动区分人类和计算机的公开图灵测试"，简称CAPTCHA\N{\c&H00D8FF&\fs40}to tell computers and humans apart or CAPTCHA for short.
Dialogue: 0,0:11:07.58,0:11:09.94,720P-CN,,0,0,0,,验证码在互联网很常见\N{\c&H00D8FF&\fs40}These are frequently used on the internet
Dialogue: 0,0:11:09.94,0:11:13.56,720P-CN,,0,0,0,,用于防止自动化系统在网站内发布垃圾信息\N{\c&H00D8FF&\fs40}to prevent automated systems from doing things like posting spam on Websites.
Dialogue: 0,0:11:13.56,0:11:16.36,720P-CN,,0,0,0,,不得不说 有时候我也看不懂那些歪歪扭扭的东西是什么\N{\c&H00D8FF&\fs40}I'll admit sometimes I can't read what those squiggly things say.
Dialogue: 0,0:11:16.36,0:11:18.24,720P-CN,,0,0,0,,这么说我也是计算机吗\N{\c&H00D8FF&\fs40}Does that mean I'm a computer?
Dialogue: 0,0:11:18.24,0:11:22.50,720P-CN,,0,0,0,,通常我们不会深入这些历史人物的私生活\N{\c&H00D8FF&\fs40}Normally in this series we don't delve into the personal lives of these historical figures
Dialogue: 0,0:11:22.50,0:11:25.74,720P-CN,,0,0,0,,但对图灵来说\N{\c&H00D8FF&\fs40}But in Turing's case his name has been inextricably tied
Dialogue: 0,0:11:25.74,0:11:28.52,720P-CN,,0,0,0,,这个名字与悲剧密不可分 因此不得不说\N{\c&H00D8FF&\fs40}to tragedy so his story is worth mentioning.
Dialogue: 0,0:11:28.52,0:11:31.37,720P-CN,,0,0,0,,图灵是同性恋\N{\c&H00D8FF&\fs40}Turing was gay in a time when homosexuality was illegal
Dialogue: 0,0:11:31.37,0:11:33.48,720P-CN,,0,0,0,,但那个时代 同性恋在英国以及世界绝大数地区是非法的\N{\c&H00D8FF&\fs40}in the united Kingdom and much of the world.
Dialogue: 0,0:11:33.48,0:11:38.51,720P-CN,,0,0,0,,1952年图灵家失窃 官方在调查中发现了图灵的性取向 \N{\c&H00D8FF&\fs40}An investigation into a 1952 Burglary at his home revealed his sexual orientation
Dialogue: 0,0:11:38.51,0:11:41.48,720P-CN,,0,0,0,,随后官方以"严重猥亵"罪名起诉图灵\N{\c&H00D8FF&\fs40}to the authorities who charged him with gross indecency.
Dialogue: 0,0:11:41.48,0:11:44.93,720P-CN,,0,0,0,,图灵被判罪名成立 被迫接受监禁或\N{\c&H00D8FF&\fs40}Turing was convicted and given a choice between imprisonment
Dialogue: 0,0:11:44.93,0:11:47.62,720P-CN,,0,0,0,,保外就医(荷尔蒙疗法控制性欲)\N{\c&H00D8FF&\fs40}or probation with hormonal treatments to suppress his sexuality.
Dialogue: 0,0:11:47.62,0:11:50.94,720P-CN,,0,0,0,,他选择了后者 也是为了继续自己的学术生涯\N{\c&H00D8FF&\fs40}He chose the latter in part to continue his academic work,
Dialogue: 0,0:11:50.94,0:11:53.72,720P-CN,,0,0,0,,但荷尔蒙疗法改变了他的情绪和性格\N{\c&H00D8FF&\fs40}but it altered his mood and personality
Dialogue: 0,0:11:53.72,0:11:56.36,720P-CN,,0,0,0,,可能实际情况永远不得而知\N{\c&H00D8FF&\fs40}Although the exact circumstances will never be known,
Dialogue: 0,0:11:56.36,0:12:01.50,720P-CN,,0,0,0,,但现在公认图灵于1954年服毒自杀\N{\c&H00D8FF&\fs40}it's most widely accepted that Alan Turing took his own life by poison in 1954.
Dialogue: 0,0:12:01.50,0:12:02.80,720P-CN,,0,0,0,,时年41岁\N{\c&H00D8FF&\fs40}He was only 41.
Dialogue: 0,0:12:02.80,0:12:04.74,720P-CN,,0,0,0,,为了纪念他对计算机科学理论的贡献\N{\c&H00D8FF&\fs40}Many things have been named in recognition of
Dialogue: 0,0:12:04.74,0:12:07.54,720P-CN,,0,0,0,,许多东西都以他为名\N{\c&H00D8FF&\fs40}Turing's contributions to theoretical computer science.
Dialogue: 0,0:12:07.54,0:12:10.86,720P-CN,,0,0,0,,但最著名的要数图灵奖\N{\c&H00D8FF&\fs40}But perhaps the most prestigious among them is the Turing Award
Dialogue: 0,0:12:10.86,0:12:13.75,720P-CN,,0,0,0,,计算机科学领域的最高荣誉\N{\c&H00D8FF&\fs40}the highest distinction in the field of computer science
Dialogue: 0,0:12:13.75,0:12:17.50,720P-CN,,0,0,0,,相当于物理、化学和其他科学领域的诺贝尔奖\N{\c&H00D8FF&\fs40}equivalent to a nobel prize in Physics, chemistry or other sciences.
Dialogue: 0,0:12:17.50,0:12:21.76,720P-CN,,0,0,0,,尽管英年早逝 但图灵仍启发了第一代计算机科学家N{\c&H00D8FF&\fs40}Despite a life cut short Alan inspired the first generation of computer scientists
Dialogue: 0,0:12:21.76,0:12:25.74,720P-CN,,0,0,0,,正由于他奠定了当今数字时代的基础 我们才得以享受\N{\c&H00D8FF&\fs40}and laid key groundwork that enabled a digital era we get to enjoy today.
Dialogue: 0,0:12:25.74,0:12:27.08,720P-CN,,0,0,0,,下周见\N{\c&H00D8FF&\fs40}I'll see you next week.
Dialogue: 0,0:12:27.08,0:12:31.04,OP-ED,,0,0,0,,{\pos(633.333,305.333)}{\c&H00D8FF&\fs55\pos(960,340)}阿尔法小分队荣誉译制\N{\c&H00D8FF&\fs45}{\c&H43DEAA&\fs45}翻：@Auriance 校：@ErrorEnvyEnchant 压制：@Mihael_Ho \N{\c&H00D8FF&\fs45}{\c&H00D8FF&\fs55}长期招募 详情见微博置顶@阿尔法小分队科教组

[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Audio File: Programming Basics- Statements & Functions- Crash Course Computer Science #12.mp4
Video File: Programming Basics- Statements & Functions- Crash Course Computer Science #12.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 195
Active Line: 202
Video Position: 15289

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: 720P-CN,Noto Sans S Chinese Bold,55,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,2,2,10,10,20,1
Style: OP-ED,Noto Sans S Chinese Bold,55,&H0000D8FF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: FOOT-NOTE,Noto Sans S Chinese Bold,45,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,2,4,10,10,20,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:04.00,OP-ED,,0,0,0,,{\pos(633.333,305.333)}{\c&H00D8FF&\fs55\pos(960,340)}阿尔法小分队荣誉译制\N{\c&H00D8FF&\fs45}{\c&H43DEAA&\fs45}翻：@Auriance 校：@ErrorEnvyEnchant 压制：@Mihael_Ho \N{\c&H00D8FF&\fs45}{\c&H00D8FF&\fs55}长期招募 详情见微博置顶@阿尔法小分队科教组
Dialogue: 0,0:00:03.00,0:00:05.81,720P-CN,,0,0,0,,大家好 我是凯莉·安 欢迎来到计算机科学速成课\N{\c&H00D8FF&\fs40}Hi, I'm Carrie Anne, and welcome to CrashCourse Computer Science!
Dialogue: 0,0:00:05.81,0:00:09.36,720P-CN,,0,0,0,,上期我们讲到了用机器码写程序\N{\c&H00D8FF&\fs40}Last episode we discussed how writing programs in native machine code,
Dialogue: 0,0:00:09.36,0:00:11.60,720P-CN,,0,0,0,,这样不得不处理大量的底层细节\N{\c&H00D8FF&\fs40}and having to contend with so many low level details,
Dialogue: 0,0:00:11.60,0:00:14.28,720P-CN,,0,0,0,,非常不利于编写复杂程序\N{\c&H00D8FF&\fs40}was a huge impediment to writing complex programs.
Dialogue: 0,0:00:14.28,0:00:16.96,720P-CN,,0,0,0,,为了抽象底层细节\N{\c&H00D8FF&\fs40}To abstract away many of these low-level details,
Dialogue: 0,0:00:16.96,0:00:19.99,720P-CN,,0,0,0,,人们发明了编程语言\N{\c&H00D8FF&\fs40}programming Languages were developed that let programmers concentrate
Dialogue: 0,0:00:19.99,0:00:21.90,720P-CN,,0,0,0,,能够让程序员专注于解决问题\N{\c&H00D8FF&\fs40}on solving a problem with computation,
Dialogue: 0,0:00:21.90,0:00:24.02,720P-CN,,0,0,0,,不再考虑相关的硬件细节\N{\c&H00D8FF&\fs40}and less on nitty gritty hardware details.
Dialogue: 0,0:00:24.02,0:00:26.52,720P-CN,,0,0,0,,今天我们会继续上次的讨论\N{\c&H00D8FF&\fs40}So today, we're going to continue that discussion, 
Dialogue: 0,0:00:26.52,0:00:28.75,720P-CN,,0,0,0,,并且介绍最基础的内容\N{\c&H00D8FF&\fs40}and introduce some fundamental building blocks
Dialogue: 0,0:00:28.75,0:00:30.90,720P-CN,,0,0,0,,几乎所有编程语言都有这些\N{\c&H00D8FF&\fs40} that almost all programming languages provide.
Dialogue: 0,0:00:39.76,0:00:43.16,720P-CN,,0,0,0,,和口语一样 编程语言也有语句\N{\c&H00D8FF&\fs40}Just like spoken languages, programming languages have statements.
Dialogue: 0,0:00:43.16,0:00:47.04,720P-CN,,0,0,0,,这些都是完整的思想表述 比如“我要喝茶”或者“下雨了”\N{\c&H00D8FF&\fs40}These are individual complete thoughts, like "I want tea" or "it is raining".
Dialogue: 0,0:00:47.04,0:00:49.36,720P-CN,,0,0,0,,替换一些词 我们就能表达不同的意思\N{\c&H00D8FF&\fs40}By using different words, we can change the meaning; 
Dialogue: 0,0:00:49.36,0:00:52.26,720P-CN,,0,0,0,,比如 把“我要喝茶”换成“我要独角兽”\N{\c&H00D8FF&\fs40}for example, "I want tea" to "I want unicorns".
Dialogue: 0,0:00:52.26,0:00:55.82,720P-CN,,0,0,0,,但我们不能把“我要喝茶”换成“我希望下雨” 这在语法上说不通\N{\c&H00D8FF&\fs40}But we can't change "I want tea" to "I want raining" - that doesn't make grammatical sense.
Dialogue: 0,0:00:55.82,0:00:59.28,720P-CN,,0,0,0,,语言中确定语句结构及组成的规则\N{\c&H00D8FF&\fs40}The set of rules that govern the structure and composition of statements in a language
Dialogue: 0,0:00:59.28,0:01:00.40,720P-CN,,0,0,0,,称为 语法\N{\c&H00D8FF&\fs40} is called syntax.
Dialogue: 0,0:01:00.40,0:01:03.38,720P-CN,,0,0,0,,英语有语法 同样的编程语言也有\N{\c&H00D8FF&\fs40}The English language has syntax, and so do all programming languages.
Dialogue: 0,0:01:03.38,0:01:05.94,720P-CN,,0,0,0,,A=5是编程语句\N{\c&H00D8FF&\fs40}"A equals 5" is a programming language statement.
Dialogue: 0,0:01:05.94,0:01:09.76,720P-CN,,0,0,0,,这个语句说明变量A的值为5\N{\c&H00D8FF&\fs40}In this case, the statement says a variable named A has the number 5 stored in it.
Dialogue: 0,0:01:09.76,0:01:13.98,720P-CN,,0,0,0,, 这个语句称为赋值语句 因为它给变量赋了值\N{\c&H00D8FF&\fs40}This is called an assignment statement because we're assigning a value to a variable.
Dialogue: 0,0:01:13.98,0:01:17.30,720P-CN,,0,0,0,,表达更复杂的意思 需要多条语句\N{\c&H00D8FF&\fs40}To express more complex things, we need a series of statements, 
Dialogue: 0,0:01:17.30,0:01:20.30,720P-CN,,0,0,0,,比如“A=5 B=10 C=A+B”\N{\c&H00D8FF&\fs40}like "A is 5, B is ten, C equals A plus B"
Dialogue: 0,0:01:20.30,0:01:23.80,720P-CN,,0,0,0,,这个程序告诉计算机赋值 A=5\N{\c&H00D8FF&\fs40}This program tells the computer to set variable 'A' equal to 5, 
Dialogue: 0,0:01:23.80,0:01:27.46,720P-CN,,0,0,0,,B=10 最终将A和B相加\N{\c&H00D8FF&\fs40}variable 'B' to 10, and finally to add 'A' and 'B' together,
Dialogue: 0,0:01:27.46,0:01:31.28,720P-CN,,0,0,0,,并将和——15——赋值给C\N{\c&H00D8FF&\fs40}and put that result, which is 15, into -- you guessed it -- variable C.
Dialogue: 0,0:01:31.28,0:01:33.32,720P-CN,,0,0,0,,注意下 变量可以随意命名\N{\c&H00D8FF&\fs40}Note that we can call variables whatever we want.
Dialogue: 0,0:01:33.32,0:01:36.08,720P-CN,,0,0,0,,可以不叫ABC，而是apple pears 和fruits\N{\c&H00D8FF&\fs40}Instead of A, B and C, it could be apples, pears, and fruits.
Dialogue: 0,0:01:36.08,0:01:39.36,720P-CN,,0,0,0,,只要名字唯一 计算机不关心具体叫什么\N{\c&H00D8FF&\fs40}The computer doesn't care, as long as variables are uniquely named.
Dialogue: 0,0:01:39.36,0:01:42.08,720P-CN,,0,0,0,,但最佳实践是给变量取有意义的名字\N{\c&H00D8FF&\fs40}But it's probably best practice to name them things that make sense
Dialogue: 0,0:01:42.08,0:01:44.52,720P-CN,,0,0,0,,以便他人理解代码\N{\c&H00D8FF&\fs40}in case someone else is trying to understand your code.
Dialogue: 0,0:01:44.52,0:01:47.58,720P-CN,,0,0,0,,由多条指令组成的程序有点像菜谱\N{\c&H00D8FF&\fs40}A program, which is a list of instructions, is a bit like a recipe:
Dialogue: 0,0:01:47.58,0:01:50.92,720P-CN,,0,0,0,,烧水 下面 煮10分钟 沥干水 然后享受美食\N{\c&H00D8FF&\fs40}boil water, add noodles, wait 10 minutes, drain and enjoy.
Dialogue: 0,0:01:50.92,0:01:53.80,720P-CN,,0,0,0,,同样的 程序从第一条语句开始\N{\c&H00D8FF&\fs40}In the same way, the program starts at the first statement 
Dialogue: 0,0:01:53.80,0:01:56.10,720P-CN,,0,0,0,,顺次执行直到结束\N{\c&H00D8FF&\fs40}and runs down one at a time until it hits the end.
Dialogue: 0,0:01:56.10,0:01:58.94,720P-CN,,0,0,0,,目前为止 我们完成了二数相加 有点无趣\N{\c&H00D8FF&\fs40}So far, we've added two numbers together. Boring.
Dialogue: 0,0:01:58.94,0:02:00.56,720P-CN,,0,0,0,,来试试写一个电子游戏\N{\c&H00D8FF&\fs40}Let's make a video game instead!
Dialogue: 0,0:02:00.56,0:02:03.80,720P-CN,,0,0,0,,当然现在还不是写完整游戏的时候\N{\c&H00D8FF&\fs40}Of course, it's way too early to think about coding an entire game,
Dialogue: 0,0:02:03.80,0:02:06.93,720P-CN,,0,0,0,,所以 我们将根据例子写些零星代码\N{\c&H00D8FF&\fs40}so instead, we'll use our example to write little snippets of code 
Dialogue: 0,0:02:06.93,0:02:08.84,720P-CN,,0,0,0,,学习编程的基础\N{\c&H00D8FF&\fs40}that cover some programming fundamentals.
Dialogue: 0,0:02:08.84,0:02:12.73,720P-CN,,0,0,0,,假设我们在写一个老式街机游戏\N{\c&H00D8FF&\fs40}Imagine we're building an old-school arcade game where Grace Hopper has to capture bugs
Dialogue: 0,0:02:12.73,0:02:15.30,720P-CN,,0,0,0,,格蕾丝·霍普老师要在虫子飞进哈佛1号造成破坏之前灭了它们\N{\c&H00D8FF&\fs40}before they get into the Harvard Mark 1 and crash the computer!
Dialogue: 0,0:02:15.30,0:02:17.86,720P-CN,,0,0,0,,每到新关卡 虫子的数量会增加\N{\c&H00D8FF&\fs40}On every level, the number of bugs increases.
Dialogue: 0,0:02:17.86,0:02:21.36,720P-CN,,0,0,0,,格蕾丝必须在虫子破坏继电器前灭了它们\N{\c&H00D8FF&\fs40}Grace has to catch them before they wear out any relays in the machine.
Dialogue: 0,0:02:21.36,0:02:24.46,720P-CN,,0,0,0,,还好 她还有备用的继电器\N{\c&H00D8FF&\fs40}Fortunately, she has a few extra relays for repairs.
Dialogue: 0,0:02:24.46,0:02:26.95,720P-CN,,0,0,0,,开始之前 我们要保存一些参数的值\N{\c&H00D8FF&\fs40}To get started, we'll need to keep track of a bunch of values
Dialogue: 0,0:02:26.95,0:02:28.24,720P-CN,,0,0,0,,这是游戏运行的重要参数\N{\c&H00D8FF&\fs40}that are important for gameplay, 
Dialogue: 0,0:02:28.24,0:02:31.76,720P-CN,,0,0,0,,比如当前游戏的关卡 分数 剩余虫子数\N{\c&H00D8FF&\fs40}like what level the player is on, the score, the number of bugs remaining, 
Dialogue: 0,0:02:31.76,0:02:34.52,720P-CN,,0,0,0,,还有物品栏里备用继电器的数量\N{\c&H00D8FF&\fs40}as well as the number of spare relays in Grace's inventory.
Dialogue: 0,0:02:34.52,0:02:38.82,720P-CN,,0,0,0,,所以 我们必须初始化这些变量 即设定变量的初值\N{\c&H00D8FF&\fs40}So, we must "initialize" our variables, that is, set their initial value:
Dialogue: 0,0:02:38.82,0:02:42.36,720P-CN,,0,0,0,,关卡为1 分数为0 虫子数为5\N{\c&H00D8FF&\fs40}"level equals 1, score equals 0, bugs equals 5, 
Dialogue: 0,0:02:42.36,0:02:45.22,720P-CN,,0,0,0,,备用继电器数为4 玩家名字为“安德烈”\N{\c&H00D8FF&\fs40}spare relays equals 4, and player name equals "Andre".
Dialogue: 0,0:02:45.22,0:02:48.43,720P-CN,,0,0,0,,互动游戏需要控制程序的流程\N{\c&H00D8FF&\fs40}To create an interactive game, we need to control the flow of the program
Dialogue: 0,0:02:48.43,0:02:49.88,720P-CN,,0,0,0,,而不仅仅是顺序执行代码\N{\c&H00D8FF&\fs40} beyond just running from top to bottom.
Dialogue: 0,0:02:49.88,0:02:52.78,720P-CN,,0,0,0,,所以我们需要流程控制语句\N{\c&H00D8FF&\fs40}To do this, we use Control Flow Statements.
Dialogue: 0,0:02:52.78,0:02:55.70,720P-CN,,0,0,0,,流程控制有好几种 但IF语句最常见\N{\c&H00D8FF&\fs40}There are several types, but If Statements are the most common.
Dialogue: 0,0:02:55.70,0:02:58.98,720P-CN,,0,0,0,,可以认为是“如果X为{\u1}真{\u0} 那么执行Y”这样的\N{\c&H00D8FF&\fs40}You can think of them as "If X is true, then do Y".
Dialogue: 0,0:02:58.98,0:03:02.60,720P-CN,,0,0,0,,换成英语的例子就是 “如果我累了 就停下来喝点茶”\N{\c&H00D8FF&\fs40}An English language example is: "If I am tired, then get tea"
Dialogue: 0,0:03:02.60,0:03:06.46,720P-CN,,0,0,0,,所以如果“我累了”这个表述为{\u1}真{\u0} 那么我就喝茶\N{\c&H00D8FF&\fs40}So if "I am tired" is a true statement, then I will go get tea
Dialogue: 0,0:03:06.46,0:03:09.58,720P-CN,,0,0,0,,如果为{\u1}假{\u0} 我就不喝\N{\c&H00D8FF&\fs40}If "I am tired" is false, then I will not go get tea.
Dialogue: 0,0:03:09.58,0:03:11.67,720P-CN,,0,0,0,,IF语句就像分叉路口\N{\c&H00D8FF&\fs40}An IF statement is like a fork in the road. 
Dialogue: 0,0:03:11.67,0:03:15.38,720P-CN,,0,0,0,,选择那条路取决于表达式的值为{\u1}真{\u0}还是{\u1}假{\u0}\N{\c&H00D8FF&\fs40}Which path you take is conditional on whether the expression is true or false
Dialogue: 0,0:03:15.38,0:03:17.88,720P-CN,,0,0,0,,因此这些表达式称为条件语句\N{\c&H00D8FF&\fs40}-- so these expressions are called Conditional Statements.
Dialogue: 0,0:03:17.88,0:03:20.92,720P-CN,,0,0,0,,大多数编程语言中IF语句看起像这样\N{\c&H00D8FF&\fs40}In most programming languages, an if statement looks something like
Dialogue: 0,0:03:20.92,0:03:24.56,720P-CN,,0,0,0,,“IF 表达式 THEN 代码 IF语句结束”\N{\c&H00D8FF&\fs40} "If, expression, then, some code, then end the if statement"
Dialogue: 0,0:03:24.56,0:03:29.30,720P-CN,,0,0,0,,例如 如果“关卡”为1 那么设分数为0 因为玩家才刚开始游戏\N{\c&H00D8FF&\fs40}For example, if "level" is 1, then we set the score to zero, because the player is just starting.
Dialogue: 0,0:03:29.30,0:03:32.16,720P-CN,,0,0,0,,为了简化 再把虫子数设为1 \N{\c&H00D8FF&\fs40}We also set the number of bugs to 1, to keep it easy for now.
Dialogue: 0,0:03:32.16,0:03:35.27,720P-CN,,0,0,0,,注意下 依赖IF条件的代码\N{\c&H00D8FF&\fs40}Notice the lines of code that are conditional on the if-statement 
Dialogue: 0,0:03:35.27,0:03:36.98,720P-CN,,0,0,0,,位于IF 和END IF之间\N{\c&H00D8FF&\fs40}are nested between the IF and END IF.
Dialogue: 0,0:03:36.98,0:03:40.48,720P-CN,,0,0,0,,当然 条件语句可以随意设定\N{\c&H00D8FF&\fs40}Of course, we can change the conditional expression to whatever we want to test,
Dialogue: 0,0:03:40.48,0:03:43.16,720P-CN,,0,0,0,,比如 “如果分数大于10” 或 “虫子数小于1”\N{\c&H00D8FF&\fs40} like "is score greater than 10" or "is bugs less than 1".
Dialogue: 0,0:03:43.16,0:03:45.66,720P-CN,,0,0,0,,IF语句还可以和ELSE语句结合使用\N{\c&H00D8FF&\fs40}And If-Statements can be combined with an ELSE statement, 
Dialogue: 0,0:03:45.66,0:03:47.44,720P-CN,,0,0,0,,当IF表达式为{\u1}假{\u0}时 ELSE语句就执行\N{\c&H00D8FF&\fs40}which acts as a catch-all if the expression is false.
Dialogue: 0,0:03:47.44,0:03:51.16,720P-CN,,0,0,0,,如果关卡不是1 ELSE代码块就会执行\N{\c&H00D8FF&\fs40}If the level is not 1, the code inside the ELSE block will be executed instead, 
Dialogue: 0,0:03:51.16,0:03:54.96,720P-CN,,0,0,0,,需要消灭的虫子数=当前关卡*3\N{\c&H00D8FF&\fs40}and the number of bugs that Grace has to battle is set to 3 times the level number.
Dialogue: 0,0:03:54.96,0:03:59.24,720P-CN,,0,0,0,,所以第2关6只虫 第3关有9只 以此类推\N{\c&H00D8FF&\fs40}So on level 2, it would be six bugs, and on level 3 there's 9, and so on.
Dialogue: 0,0:03:59.24,0:04:03.26,720P-CN,,0,0,0,,ELSE代码块不修改分数 因此分数会保留到下一关\N{\c&H00D8FF&\fs40}Score isn't modified in the ELSE block, so Grace gets to keep any points earned.
Dialogue: 0,0:04:03.26,0:04:05.26,720P-CN,,0,0,0,,这是流行编程语言中\N{\c&H00D8FF&\fs40}Here are some examples of if-then-else statements 
Dialogue: 0,0:04:05.26,0:04:07.20,720P-CN,,0,0,0,,IF-THEN-ELSE语句的例子\N{\c&H00D8FF&\fs40}from some popular programming languages
Dialogue: 0,0:04:07.20,0:04:11.02,720P-CN,,0,0,0,,可以发现语法略有不同 但本质结构基本一样\N{\c&H00D8FF&\fs40}-- you can see the syntax varies a little, but the underlying structure is roughly the same.
Dialogue: 0,0:04:11.02,0:04:15.32,720P-CN,,0,0,0,,IF语句每执行一次就根据条件确定下一步的执行语句 \N{\c&H00D8FF&\fs40}If-statements are executed once, a conditional path is chosen, and the program moves on.
Dialogue: 0,0:04:15.32,0:04:18.96,720P-CN,,0,0,0,,要重复执行语句 需要用到条件循环\N{\c&H00D8FF&\fs40}To repeat some statements many times, we need to create a conditional loop.
Dialogue: 0,0:04:18.96,0:04:22.10,720P-CN,,0,0,0,,其中一种是WHILE语句 又称为WHILE循环\N{\c&H00D8FF&\fs40}One way is a while statement, also called a while loop.
Dialogue: 0,0:04:22.10,0:04:25.41,720P-CN,,0,0,0,,跟你想的一样 只要条件为{\u1}真{\u0} 它就一直循环执行\N{\c&H00D8FF&\fs40}As you might have guessed, this loops a piece of code "while" a condition is true. 
Dialogue: 0,0:04:25.41,0:04:28.78,720P-CN,,0,0,0,,不管编程语言如何 WHLE循环看起来都像这样\N{\c&H00D8FF&\fs40}Regardless of the programming language, they look something like this:
Dialogue: 0,0:04:28.78,0:04:30.62,720P-CN,,0,0,0,,回到我们的游戏 假如到了某个时候\N{\c&H00D8FF&\fs40}In our game, let's say at certain points, 
Dialogue: 0,0:04:30.62,0:04:33.42,720P-CN,,0,0,0,,友好的同事会重新补充格蕾丝的继电器库存 太棒了\N{\c&H00D8FF&\fs40}a friendly colleague restocks Grace with relays! Hooray!
Dialogue: 0,0:04:33.42,0:04:37.62,720P-CN,,0,0,0,,为了动态展示他补满库存到4的过程 我们使用WHILE循环\N{\c&H00D8FF&\fs40}To animate him replenishing our stock back up to a maximum of 4, we can use a while loop.
Dialogue: 0,0:04:37.62,0:04:39.00,720P-CN,,0,0,0,,来看看这个代码\N{\c&H00D8FF&\fs40}Let's walk through this code.
Dialogue: 0,0:04:39.00,0:04:43.28,720P-CN,,0,0,0,,首先假设同事出现时 格蕾丝只剩1个继电器了\N{\c&H00D8FF&\fs40}First we'll assume that Grace only has 1 tube left when her colleague enters.
Dialogue: 0,0:04:43.28,0:04:47.62,720P-CN,,0,0,0,,进入WHILE循环时 计算机首先检查以下条件是否满足\N{\c&H00D8FF&\fs40}When we enter the while loop, the first thing the computer does is test its conditional
Dialogue: 0,0:04:47.62,0:04:52.00,720P-CN,,0,0,0,,继电器数小于4吗 当前继电器数为1 所以答案是肯定的\N{\c&H00D8FF&\fs40}is relays less than 4? Well, relays is currently 1, so yes.
Dialogue: 0,0:04:52.00,0:04:56.32,720P-CN,,0,0,0,,现在进入循环 随后执行到这行代码 relays = relays + 1\N{\c&H00D8FF&\fs40}Now we enter the loop! Then, we hit the line of code: "relays equals relays plus 1".
Dialogue: 0,0:04:56.32,0:05:00.46,720P-CN,,0,0,0,,因为变量在赋值语句中用到了自己 所以不太好理解\N{\c&H00D8FF&\fs40}This is a bit confusing because the variable is using itself in an assignment statement,
Dialogue: 0,0:05:00.46,0:05:01.54,720P-CN,,0,0,0,,来仔细看看\N{\c&H00D8FF&\fs40}so let's unpack it.
Dialogue: 0,0:05:01.54,0:05:05.00,720P-CN,,0,0,0,,永远先看等号右边的内容\N{\c&H00D8FF&\fs40}You always start by figuring out the right side of the equals sign first,
Dialogue: 0,0:05:05.00,0:05:07.30,720P-CN,,0,0,0,,所以“relays+1”的结果是什么呢\N{\c&H00D8FF&\fs40}so what does "relays plus 1" come out to be?
Dialogue: 0,0:05:07.30,0:05:11.50,720P-CN,,0,0,0,,现在继电器的数量为1 所以1+1=2\N{\c&H00D8FF&\fs40}Well, relays is currently the value 1, so 1 plus 1 equals 2.
Dialogue: 0,0:05:11.50,0:05:16.06,720P-CN,,0,0,0,,然后这个结果再存到继电器数这个变量中 覆盖原值\N{\c&H00D8FF&\fs40}Then, this result gets saved back into the variable relays, writing over the old value,
Dialogue: 0,0:05:16.06,0:05:17.84,720P-CN,,0,0,0,,现在继电器数的值是2\N{\c&H00D8FF&\fs40}so now relays stores the value 2.
Dialogue: 0,0:05:17.84,0:05:21.00,720P-CN,,0,0,0,,一次WHILE循环结束 然后再重新开始\N{\c&H00D8FF&\fs40}We've hit the end of the while loop, which jumps the program back up.
Dialogue: 0,0:05:21.00,0:05:24.44,720P-CN,,0,0,0,,和之前一样 检查是否满足循环执行条件\N{\c&H00D8FF&\fs40}Just as before, we test the conditional to see if we're going to enter the loop.
Dialogue: 0,0:05:24.44,0:05:29.40,720P-CN,,0,0,0,,继电器数小于4吗 是的 继电器数现在为2 所以继续执行循环\N{\c&H00D8FF&\fs40}Is relays less than 4? Well, yes, relays now equals 2, so we enter the loop again!
Dialogue: 0,0:05:29.40,0:05:33.28,720P-CN,,0,0,0,,2+1=3 所以继电器数现在3 再执行循环\N{\c&H00D8FF&\fs40}2 plus 1 equals 3. So 3 is saved into relays. Loop again.
Dialogue: 0,0:05:33.28,0:05:36.44,720P-CN,,0,0,0,,3小于4吗 是的 再次执行循环\N{\c&H00D8FF&\fs40}Is 3 less than 4? Yes it is! Into the loop again.
Dialogue: 0,0:05:36.44,0:05:40.46,720P-CN,,0,0,0,,3+1=4 继电器数现在是4 再次执行循环\N{\c&H00D8FF&\fs40}3 plus 1 equals 4. So we save 4 into relays. Loop again.
Dialogue: 0,0:05:40.46,0:05:43.96,720P-CN,,0,0,0,,4小于4吗 不是的 所以条件现在为{\u1}假{\u0}\N{\c&H00D8FF&\fs40}Is 4 less than 4?....No! So the condition is now false,
Dialogue: 0,0:05:43.96,0:05:46.94,720P-CN,,0,0,0,,因此退出循环 执行剩下的代码\N{\c&H00D8FF&\fs40}and thus we exit the loop and move on to any remaining code.
Dialogue: 0,0:05:46.94,0:05:48.44,720P-CN,,0,0,0,,这就是WHILE循环\N{\c&H00D8FF&\fs40}That's how a while loop works!
Dialogue: 0,0:05:48.44,0:05:50.14,720P-CN,,0,0,0,,FOR循环也很常用\N{\c&H00D8FF&\fs40}There's also the common For Loop.
Dialogue: 0,0:05:50.14,0:05:52.12,720P-CN,,0,0,0,,它不像通过条件控制的循环\N{\c&H00D8FF&\fs40}Instead of being a condition-controlled loop 
Dialogue: 0,0:05:52.12,0:05:54.34,720P-CN,,0,0,0,,一直循环直到条件为{\u1}假{\u0}\N{\c&H00D8FF&\fs40}that can repeat forever until the condition is false, 
Dialogue: 0,0:05:54.34,0:05:58.38,720P-CN,,0,0,0,,FOR循环是计数的 只重复固定的次数\N{\c&H00D8FF&\fs40}a FOR loop is count-controlled; it repeats a specific number of times.
Dialogue: 0,0:05:58.38,0:06:01.94,720P-CN,,0,0,0,,看起来是这样的 现在来点真实的数值\N{\c&H00D8FF&\fs40}They look something like this: Now, let's put in some real values.
Dialogue: 0,0:06:01.94,0:06:03.60,720P-CN,,0,0,0,,例子里循环了10次\N{\c&H00D8FF&\fs40}This example loops 10 times,
Dialogue: 0,0:06:03.60,0:06:07.86,720P-CN,,0,0,0,,因为我们指定了变量i的起始值为1 最大值为10\N{\c&H00D8FF&\fs40}because we've specified that variable 'i' starts at the value 1 and goes up to 10.
Dialogue: 0,0:06:07.86,0:06:11.98,720P-CN,,0,0,0,,FOR循环的特别之处是每执行一次循环 变量i加1\N{\c&H00D8FF&\fs40}The unique thing about a FOR loop is that each time it hits NEXT, it adds one to 'i'.
Dialogue: 0,0:06:11.98,0:06:16.42,720P-CN,,0,0,0,,当i=10时 计算机知道循环执行了10次 然后退出\N{\c&H00D8FF&\fs40}When 'i' equals 10, the computer knows it's been looped 10 times, and the loop exits.
Dialogue: 0,0:06:16.42,0:06:20.64,720P-CN,,0,0,0,,可以任意指定循环的次数 比如10 42 或者10亿 全看心情\N{\c&H00D8FF&\fs40}We can set the number to whatever we want -- 10, 42, or a billion -- it's up to us.
Dialogue: 0,0:06:20.64,0:06:23.44,720P-CN,,0,0,0,,假如我们想在完成关卡时 给玩家额外分数奖励\N{\c&H00D8FF&\fs40}Let's say we want to give the player a bonus at the end of each level 
Dialogue: 0,0:06:23.44,0:06:25.88,720P-CN,,0,0,0,,奖励分值由剩余继电器数确定\N{\c&H00D8FF&\fs40}for the number of vacuum relays they have left over.
Dialogue: 0,0:06:25.88,0:06:29.20,720P-CN,,0,0,0,,随着游戏难度提高 只有技术更好才能剩下继电器\N{\c&H00D8FF&\fs40}As the game gets harder, it takes more skill to have unused relays,
Dialogue: 0,0:06:29.20,0:06:32.24,720P-CN,,0,0,0,,所以奖励分数将按照当前关卡以指数形式增长\N{\c&H00D8FF&\fs40}so we want the bonus to go up exponentially based on the level.
Dialogue: 0,0:06:32.24,0:06:35.24,720P-CN,,0,0,0,,需要写一段代码计算指数幂\N{\c&H00D8FF&\fs40}We need to write a piece of code that calculates exponents 
Dialogue: 0,0:06:35.24,0:06:40.16,720P-CN,,0,0,0,,指数幂是一个数按一定次数与自身反复相乘 循环非常适合计算指数幂\N{\c&H00D8FF&\fs40}- that is, multiplying a number by itself a specific number of times. A loop is perfect for this!
Dialogue: 0,0:06:40.16,0:06:43.90,720P-CN,,0,0,0,,首先初始化称为“Bounus(奖励)”的参数 并将其置为1\N{\c&H00D8FF&\fs40}First lets initialize a new variable called "bonus" and set it to 1.
Dialogue: 0,0:06:43.90,0:06:48.08,720P-CN,,0,0,0,,然后 创建FOR循环 从1开始执行到当前关卡数\N{\c&H00D8FF&\fs40}Then, we create a FOR loop starting at 1, and looping up to the level number.
Dialogue: 0,0:06:48.08,0:06:51.56,720P-CN,,0,0,0,,在循环内部 将奖励分值与继电器数相乘\N{\c&H00D8FF&\fs40}Inside that loop, we multiply bonus times the number of relays, 
Dialogue: 0,0:06:51.56,0:06:53.72,720P-CN,,0,0,0,,并将新值覆盖原值\N{\c&H00D8FF&\fs40}and save that new value back into bonus.
Dialogue: 0,0:06:53.72,0:06:57.48,720P-CN,,0,0,0,,比如 假设继电器数为2 关卡为3\N{\c&H00D8FF&\fs40}For example, let's say relays equals 2, and level equals 3.
Dialogue: 0,0:06:57.48,0:06:59.56,720P-CN,,0,0,0,,所以FOR循环会执行3次\N{\c&H00D8FF&\fs40}So the FOR loop will loop three times, 
Dialogue: 0,0:06:59.56,0:07:03.38,720P-CN,,0,0,0,,这意味着 奖励分值会乘以继电器数 乘以继电器数 再乘以继电器数\N{\c&H00D8FF&\fs40}which means bonus is going to get multiplied by relays... by relays... by relays.
Dialogue: 0,0:07:03.38,0:07:08.80,720P-CN,,0,0,0,,在例子中 就是*2 *2 *2 奖励分值是8 这是2的3次方\N{\c&H00D8FF&\fs40}Or in this case, times 2, times 2, times 2, which is a bonus of 8! That's 2 to the 3rd power!
Dialogue: 0,0:07:08.80,0:07:12.68,720P-CN,,0,0,0,,这个指数代码很有用 在其他代码中可能还会用到\N{\c&H00D8FF&\fs40}This exponent code is useful, and we might want to use it in other parts of our code.
Dialogue: 0,0:07:12.68,0:07:14.83,720P-CN,,0,0,0,,到处复制粘贴这段代码很麻烦\N{\c&H00D8FF&\fs40}It'd be annoying to copy and paste this everywhere, 
Dialogue: 0,0:07:14.83,0:07:16.92,720P-CN,,0,0,0,,每次还不得不修改变量的名字\N{\c&H00D8FF&\fs40}and have to update the variable names each time.
Dialogue: 0,0:07:16.92,0:07:21.14,720P-CN,,0,0,0,,并且如果发现了bug 我们也得到处找用到代码的地方 再更新代码\N{\c&H00D8FF&\fs40}Also, if we found a bug, we'd have to hunt around and update every place we used it.
Dialogue: 0,0:07:21.14,0:07:23.66,720P-CN,,0,0,0,,也让代码更难理解\N{\c&H00D8FF&\fs40}It also makes code more confusing to look at.
Dialogue: 0,0:07:23.66,0:07:24.70,720P-CN,,0,0,0,,少就是多！\N{\c&H00D8FF&\fs40}Less is more!
Dialogue: 0,0:07:24.70,0:07:27.34,720P-CN,,0,0,0,,我们需要封装指数计算的代码\N{\c&H00D8FF&\fs40}What we want is a way to package up our exponent code
Dialogue: 0,0:07:27.34,0:07:30.94,720P-CN,,0,0,0,,方便使用 获取结果 也可以忽略内部的复杂性\N{\c&H00D8FF&\fs40}so we can use it, get the result, and not have to see all the internal complexity.
Dialogue: 0,0:07:30.94,0:07:33.88,720P-CN,,0,0,0,,我们再次提升了一个抽象等级\N{\c&H00D8FF&\fs40}We're once again moving up a new level of abstraction!
Dialogue: 0,0:07:40.04,0:07:41.94,720P-CN,,0,0,0,,为了封装以及隐藏复杂性\N{\c&H00D8FF&\fs40}To compartmentalize and hide complexity,
Dialogue: 0,0:07:41.94,0:07:45.26,720P-CN,,0,0,0,,编程语言可以将多块代码封装为命名函数\N{\c&H00D8FF&\fs40}programming languages can package pieces of code into named functions,
Dialogue: 0,0:07:45.26,0:07:48.92,720P-CN,,0,0,0,,在其他编程语言中也称为方法或子程序\N{\c&H00D8FF&\fs40}also called methods or subroutines in different programming languages.
Dialogue: 0,0:07:48.92,0:07:53.34,720P-CN,,0,0,0,,这些函数能在程序的任意位置使用 只需要调用它的名字\N{\c&H00D8FF&\fs40}These functions can then be used by any other part of that program just by calling its name.
Dialogue: 0,0:07:53.34,0:07:55.72,720P-CN,,0,0,0,,我们来把指数计算代码改写成函数\N{\c&H00D8FF&\fs40}Let's turn our exponent code into a function!
Dialogue: 0,0:07:55.72,0:08:00.24,720P-CN,,0,0,0,,首先要给它命名 可以随便取 比如HappyUnicorn(开心独角兽)\N{\c&H00D8FF&\fs40}First, we should name it. We can call it anything we want, like HappyUnicorn, 
Dialogue: 0,0:08:00.24,0:08:03.58,720P-CN,,0,0,0,,但是因为代码计算指数 就叫它exponent好了\N{\c&H00D8FF&\fs40}but since our code calculates exponents, let's call it exponent.
Dialogue: 0,0:08:03.58,0:08:07.24,720P-CN,,0,0,0,,同样的 不再使用“relays(继电器)”和“levels(关卡)”这样的具体名字\N{\c&H00D8FF&\fs40}Also, instead of using specific variable names, like "relays" and "levels", 
Dialogue: 0,0:08:07.24,0:08:10.40,720P-CN,,0,0,0,,我们使用通用的变量名 比如Base(底数)和Exp(指数)\N{\c&H00D8FF&\fs40}we specify generic variable names, like Base and Exp,
Dialogue: 0,0:08:10.40,0:08:13.30,720P-CN,,0,0,0,,它们俩的初始值来自程序的其他地方\N{\c&H00D8FF&\fs40}whose initial values are going to be "passed" into our function
Dialogue: 0,0:08:13.30,0:08:15.26,720P-CN,,0,0,0,,将传递到函数中\N{\c&H00D8FF&\fs40} from some other part of the program.
Dialogue: 0,0:08:15.26,0:08:17.56,720P-CN,,0,0,0,,剩下的代码和之前一样\N{\c&H00D8FF&\fs40}The rest of our code is the same as before, 
Dialogue: 0,0:08:17.56,0:08:20.58,720P-CN,,0,0,0,,换用新的变量名放入函数中\N{\c&H00D8FF&\fs40}now tucked into our function and with new variable names.
Dialogue: 0,0:08:20.58,0:08:23.14,720P-CN,,0,0,0,,最后 我们需要把指数代码的结果\N{\c&H00D8FF&\fs40}Finally, we need to send the result of our exponent code 
Dialogue: 0,0:08:23.14,0:08:25.30,720P-CN,,0,0,0,,回传给程序调用的部分\N{\c&H00D8FF&\fs40}back to the part of the program that requested it.
Dialogue: 0,0:08:25.30,0:08:29.72,720P-CN,,0,0,0,,因此我们使用了RETURN语句 并返回保存了结果的变量“result”\N{\c&H00D8FF&\fs40}For this, we use a RETURN statement, and specify that the value in 'result' be returned.
Dialogue: 0,0:08:29.72,0:08:31.90,720P-CN,,0,0,0,,完整的函数代码如下\N{\c&H00D8FF&\fs40}So our full function code looks like this:
Dialogue: 0,0:08:31.90,0:08:34.49,720P-CN,,0,0,0,,现在可以在程序的任意位置使用这个程序了\N{\c&H00D8FF&\fs40}Now we can use this function anywhere in our program, 
Dialogue: 0,0:08:34.49,0:08:37.02,720P-CN,,0,0,0,,只需要简单调用函数名 并传入2个参数值\N{\c&H00D8FF&\fs40}simply by calling its name and passing in two numbers.
Dialogue: 0,0:08:37.02,0:08:40.20,720P-CN,,0,0,0,,比如 如果想计算2的44次方\N{\c&H00D8FF&\fs40}For example, if we want to calculate 2 to the 44th power,
Dialogue: 0,0:08:40.20,0:08:45.30,720P-CN,,0,0,0,,只要调用exponent(2,44) 就会返回结果(大约为18万亿)\N{\c&H00D8FF&\fs40}we can just call "exponent 2 comma 44." and like 18 trillion comes back.
Dialogue: 0,0:08:45.30,0:08:50.72,720P-CN,,0,0,0,,函数内部 2和44分别赋值给底数和指数\N{\c&H00D8FF&\fs40}Behind the scenes, 2 and 44 get saved into variables Base and Exp inside the function,
Dialogue: 0,0:08:50.72,0:08:54.92,720P-CN,,0,0,0,,函数执行了全部的循环 随后返回结果\N{\c&H00D8FF&\fs40}it does all its loops as necessary, and then the function returns with the result.
Dialogue: 0,0:08:54.92,0:08:58.28,720P-CN,,0,0,0,,我们用一下新编的函数来计算奖励分值\N{\c&H00D8FF&\fs40}Let's use our newly minted function to calculate a score bonus.
Dialogue: 0,0:08:58.28,0:09:00.35,720P-CN,,0,0,0,,首先 初始化奖励分为0\N{\c&H00D8FF&\fs40}First, we initialize bonus to 0. 
Dialogue: 0,0:09:00.35,0:09:04.12,720P-CN,,0,0,0,,随后利用IF语句检查玩家是否有剩余继电器\N{\c&H00D8FF&\fs40}Then we check if the player has any remaining relays with an if-statement.
Dialogue: 0,0:09:04.12,0:09:07.69,720P-CN,,0,0,0,,如果有 那么调用exponent函数 传入参数relays(继电器数)和level(关卡)\N{\c&H00D8FF&\fs40}If they do, we call our exponent function, passing in relays and level, 
Dialogue: 0,0:09:07.69,0:09:10.12,720P-CN,,0,0,0,,函数将计算relays^level (继电器数的关卡次方)\N{\c&H00D8FF&\fs40}which calculates relays to the power of level,
Dialogue: 0,0:09:10.12,0:09:12.74,720P-CN,,0,0,0,,并返回保存在bonus变量中的结果\N{\c&H00D8FF&\fs40}and returns the result, which we save into bonus.
Dialogue: 0,0:09:12.74,0:09:17.28,720P-CN,,0,0,0,,这个计算奖励分的代码以后还有用 也把它封装成函数\N{\c&H00D8FF&\fs40}This bonus calculating code might be useful later, so let's wrap it up as a function too!
Dialogue: 0,0:09:17.28,0:09:19.53,720P-CN,,0,0,0,,是的 函数内部调用函数\N{\c&H00D8FF&\fs40}Yes, a function that calls a function! 
Dialogue: 0,0:09:19.53,0:09:24.62,720P-CN,,0,0,0,,然后 等等 我们还能在更复杂的函数中使用它\N{\c&H00D8FF&\fs40}And then, wait for it…. we can use this function in an even more complex function.
Dialogue: 0,0:09:24.62,0:09:27.87,720P-CN,,0,0,0,,我们写一个每当玩家通关时就调用的函数\N{\c&H00D8FF&\fs40}Let's write one that gets called everytime the player finishes a level. 
Dialogue: 0,0:09:27.87,0:09:29.54,720P-CN,,0,0,0,,取个名字叫 levelFinished(完成关卡)\N{\c&H00D8FF&\fs40}We'll call it "levelFinished" 
Dialogue: 0,0:09:29.54,0:09:33.92,720P-CN,,0,0,0,,它需要获取剩余的继电器数 关卡 以及当前分数\N{\c&H00D8FF&\fs40}- it needs to know the number of relays left, what level it was, and the current score; 
Dialogue: 0,0:09:33.92,0:09:36.02,720P-CN,,0,0,0,,这些数值必须传入到函数里\N{\c&H00D8FF&\fs40}those values have to get passed in.
Dialogue: 0,0:09:36.02,0:09:39.76,720P-CN,,0,0,0,,在函数内部 我们会使用calcBonus函数计算奖励分\N{\c&H00D8FF&\fs40}Inside our function, we'll calculate the bonus, using our calcBonus function,
Dialogue: 0,0:09:39.76,0:09:42.14,720P-CN,,0,0,0,,并把奖励分与当前分数相加\N{\c&H00D8FF&\fs40} and add that to the running score.
Dialogue: 0,0:09:42.14,0:09:45.89,720P-CN,,0,0,0,,还有 如果当前分数为历史新高\N{\c&H00D8FF&\fs40}Also, if the current score is higher than the game's high score, 
Dialogue: 0,0:09:45.89,0:09:48.00,720P-CN,,0,0,0,,保存新高分数以及玩家名称\N{\c&H00D8FF&\fs40}we save the new high score and the players name.
Dialogue: 0,0:09:48.00,0:09:51.80,720P-CN,,0,0,0,,最后 我们返回当前的分数 现在程序已经很不错了\N{\c&H00D8FF&\fs40}Finally, we return the current score. Now we're getting pretty fancy.
Dialogue: 0,0:09:51.80,0:09:54.11,720P-CN,,0,0,0,,函数内部调用函数 后者内部再调用函数\N{\c&H00D8FF&\fs40}Functions are calling functions are calling functions! 
Dialogue: 0,0:09:54.11,0:09:57.64,720P-CN,,0,0,0,,这样调用一行代码时 内部的细节就被隐藏了 \N{\c&H00D8FF&\fs40}When we call a single line of code like this, the complexity is hidden.
Dialogue: 0,0:09:57.64,0:10:00.32,720P-CN,,0,0,0,,也不用管内部的循环或变量\N{\c&H00D8FF&\fs40}We don't see all the internal loops and variables, 
Dialogue: 0,0:10:00.32,0:10:04.56,720P-CN,,0,0,0,,只有返回的结果 就像魔法一样 总分数是53\N{\c&H00D8FF&\fs40}we just see the result come back as if by magic …. a total score of 53.
Dialogue: 0,0:10:04.56,0:10:07.24,720P-CN,,0,0,0,,但这不是魔法 是抽象大法\N{\c&H00D8FF&\fs40}But it's not magic, it's the power of abstraction!
Dialogue: 0,0:10:07.24,0:10:10.50,720P-CN,,0,0,0,,如果你理解了这个例子 那你就理解了函数的威力\N{\c&H00D8FF&\fs40}If you understand this example, then you understand the power of functions, 
Dialogue: 0,0:10:10.50,0:10:13.08,720P-CN,,0,0,0,,以及现代编程的本质\N{\c&H00D8FF&\fs40}and the entire essence of modern programming.
Dialogue: 0,0:10:13.08,0:10:15.80,720P-CN,,0,0,0,,用一串巨长的编程语句\N{\c&H00D8FF&\fs40}It's not feasible to write, for example, a web browser 
Dialogue: 0,0:10:15.80,0:10:18.56,720P-CN,,0,0,0,,编写浏览器程序是不现实的\N{\c&H00D8FF&\fs40}as one gigantically long list of statements.
Dialogue: 0,0:10:18.56,0:10:21.62,720P-CN,,0,0,0,,程序会有几百万行代码 也无法理解\N{\c&H00D8FF&\fs40}It would be millions of lines long and impossible to comprehend!
Dialogue: 0,0:10:21.62,0:10:24.93,720P-CN,,0,0,0,,因此 软件应由成千上万个小函数组成\N{\c&H00D8FF&\fs40}So instead, software consists of thousands of smaller functions, 
Dialogue: 0,0:10:24.93,0:10:26.98,720P-CN,,0,0,0,,每个完成不同的功能\N{\c&H00D8FF&\fs40}each responsible for different features.
Dialogue: 0,0:10:26.98,0:10:28.73,720P-CN,,0,0,0,,现代编程中\N{\c&H00D8FF&\fs40}In modern programming, it's uncommon to see
Dialogue: 0,0:10:28.73,0:10:31.14,720P-CN,,0,0,0,,超过100行的函数已经不多见了\N{\c&H00D8FF&\fs40} functions longer than around 100 lines of code,
Dialogue: 0,0:10:31.14,0:10:33.44,720P-CN,,0,0,0,,因为如果超过100行\N{\c&H00D8FF&\fs40}because by then, there's probably something
Dialogue: 0,0:10:33.44,0:10:35.54,720P-CN,,0,0,0,,往往可以从中提取出部分代码 并将其写为新的函数\N{\c&H00D8FF&\fs40} that should be pulled out and made into its own function.
Dialogue: 0,0:10:35.54,0:10:37.65,720P-CN,,0,0,0,,模块化编程\N{\c&H00D8FF&\fs40}Modularizing programs into functions 
Dialogue: 0,0:10:37.65,0:10:39.98,720P-CN,,0,0,0,,不仅让单个程序员可以完成整个应用\N{\c&H00D8FF&\fs40}not only allows a single programmer to write an entire app,
Dialogue: 0,0:10:39.98,0:10:44.06,720P-CN,,0,0,0,,更能让开发团队高效协作 编写更大的程序\N{\c&H00D8FF&\fs40}but also allows teams of people to work efficiently on even bigger programs.
Dialogue: 0,0:10:44.07,0:10:46.62,720P-CN,,0,0,0,,每个程序员可以负责不同的函数\N{\c&H00D8FF&\fs40}Different programmers can work on different functions,
Dialogue: 0,0:10:46.62,0:10:48.83,720P-CN,,0,0,0,,只要每个人确保自己的部分正常工作\N{\c&H00D8FF&\fs40}and if everyone makes sure their code works correctly, 
Dialogue: 0,0:10:48.83,0:10:51.76,720P-CN,,0,0,0,,然后当代码合并时 完整的程序也能正常运行\N{\c&H00D8FF&\fs40}then when everything is put together, the whole program should work too!
Dialogue: 0,0:10:51.76,0:10:56.38,720P-CN,,0,0,0,,现实中 程序员不会浪费时间编写指数这样的代码\N{\c&H00D8FF&\fs40}And in the real world, programmers aren't wasting time writing things like exponents.
Dialogue: 0,0:10:56.38,0:10:59.97,720P-CN,,0,0,0,,现代编程语言都有预置的庞大代码包\N{\c&H00D8FF&\fs40}Modern programming languages come with huge bundles of pre-written functions,
Dialogue: 0,0:10:59.97,0:11:01.30,720P-CN,,0,0,0,,称为库\N{\c&H00D8FF&\fs40} called Libraries.
Dialogue: 0,0:11:01.30,0:11:05.01,720P-CN,,0,0,0,,它们由顶尖程序员编写 经过反复测试且执行效率高\N{\c&H00D8FF&\fs40}These are written by expert coders, made efficient and rigorously tested, 
Dialogue: 0,0:11:05.01,0:11:06.60,720P-CN,,0,0,0,,完成后再交给剩下的人使用\N{\c&H00D8FF&\fs40}and then given to everyone.
Dialogue: 0,0:11:06.60,0:11:10.58,720P-CN,,0,0,0,,代码库覆盖了方方面面 包括网络 图像和声音\N{\c&H00D8FF&\fs40}There are libraries for almost everything, including networking, graphics, and sound
Dialogue: 0,0:11:10.58,0:11:12.58,720P-CN,,0,0,0,,这些主题我们以后再讲\N{\c&H00D8FF&\fs40}-- topics we'll discuss in future episodes.
Dialogue: 0,0:11:12.58,0:11:16.00,720P-CN,,0,0,0,,在那之前 我们要先讲算法\N{\c&H00D8FF&\fs40}But before we get to those, we need to talk about Algorithms.
Dialogue: 0,0:11:16.00,0:11:19.26,720P-CN,,0,0,0,,感兴趣了吗 应该的 下周见\N{\c&H00D8FF&\fs40}Intrigued? You should be. I'll see you next week.
Dialogue: 4,0:11:19.26,0:11:24.02,OP-ED,,0,0,0,,{\pos(633.333,305.333)}{\c&H00D8FF&\fs55\pos(960,340)}阿尔法小分队荣誉译制\N{\c&H00D8FF&\fs45}{\c&H43DEAA&\fs45}翻：@Auriance 校：@ErrorEnvyEnchant 压制：@Mihael_Ho \N{\c&H00D8FF&\fs45}{\c&H00D8FF&\fs55}长期招募 详情见微博置顶@阿尔法小分队科教组
